import logging
import threading
from datetime import datetime, timedelta
from database.active_markets_reader import ActiveMarketsReader
from database.analytic_updater import AnalyticUpdater
from analysis.category_filter import CategoryFilter
from active_markets.market_lifecycle_manager import MarketLifecycleManager

logger = logging.getLogger(__name__)

class RecentlyClosedChecker:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.reader = ActiveMarketsReader()
        self.updater = AnalyticUpdater()
        self.category_filter = CategoryFilter()
        self.lifecycle_manager = MarketLifecycleManager(bot_instance)
    
    def check_recently_closed_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ä—ã–Ω–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏, –∑–∞–∫—Ä—ã—Ç—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            recently_closed = self.reader.get_recently_closed_markets()
            
            current_time = datetime.now()
            
            for market in recently_closed:
                market_id = market['id']
                slug = market['slug']
                created_at = market['created_at_analytic']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                analysis_end_time_from_created = created_at + timedelta(minutes=60)  # 60 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                remaining_time_from_created = (analysis_end_time_from_created - current_time).total_seconds() / 60
                
                if current_time < analysis_end_time_from_created:
                    logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –±—ã–ª –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç! –í—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                    category_check = self.category_filter.check_category(slug)
                    if not category_check['is_boolean']:
                        logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                        continue
                    
                    # –†—ã–Ω–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.updater.update_market_analysis(market_id, {'status': '–≤ —Ä–∞–±–æ—Ç–µ'})
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                    self.bot.active_markets[market_id] = {
                        'start_time': datetime.now(),
                        'last_log': datetime.now(),
                        'slug': slug,
                        'question': market.get('question', f"Market: {slug}")
                    }
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    analysis_thread = threading.Thread(
                        target=self.lifecycle_manager.analyze_market_continuously_restored,
                        args=(market_id, slug)
                    )
                    analysis_thread.daemon = True
                    analysis_thread.start()
                    
                    logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}") 