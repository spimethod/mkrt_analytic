import logging
from datetime import datetime, timedelta
from database.active_markets_reader import ActiveMarketsReader
from active_markets.market_lifecycle_manager import MarketLifecycleManager
import os

logger = logging.getLogger(__name__)

class ActiveMarketsUpdater:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.reader = ActiveMarketsReader()
        self.lifecycle_manager = MarketLifecycleManager(bot_instance)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.analysis_time_minutes = int(os.getenv('MKRT_ANALYTIC_TIME_MIN', '60'))
    
    def update_active_markets(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        try:
            active_markets = self.reader.get_active_markets()
            
            for market in active_markets:
                if market['id'] in self.bot.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏–∑ active_markets
                    created_at = market.get('created_at_analytic')
                    if created_at:
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –∏–º–µ–µ—Ç timezone, –¥–æ–±–∞–≤–ª—è–µ–º UTC
                        if created_at.tzinfo is None:
                            from datetime import timezone
                            created_at = created_at.replace(tzinfo=timezone.utc)
                        
                        current_time = datetime.now(timezone.utc)
                        time_diff = current_time - created_at
                        
                        if time_diff > timedelta(minutes=self.analysis_time_minutes):
                            logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {market['id']} –∑–∞–∫—Ä—ã—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–∞–ª–∏–∑–∞ ({self.analysis_time_minutes} –º–∏–Ω)")
                            logger.info(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, —Ä–∞–∑–Ω–∏—Ü–∞: {time_diff}")
                            self.lifecycle_manager.stop_market_analysis(market['id'], "–∑–∞–∫—Ä—ã—Ç")
                        else:
                            remaining_minutes = (timedelta(minutes=self.analysis_time_minutes) - time_diff).total_seconds() / 60
                            logger.debug(f"‚è∞ –†—ã–Ω–æ–∫ {market['id']} –∞–∫—Ç–∏–≤–µ–Ω –µ—â–µ {remaining_minutes:.1f} –º–∏–Ω—É—Ç")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Ä—ã–Ω–∫–∞ {market['id']}")
        
        except Exception as e:
            error_msg = f"Error updating active markets: {e}"
            logger.error(error_msg)
            from telegram.error_logger import ErrorLogger
            error_logger = ErrorLogger()
            error_logger.log_error(error_msg) 