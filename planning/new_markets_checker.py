import logging
import threading
from datetime import datetime, timedelta, timezone
from database.markets_reader import MarketsReader
from database.analytic_writer import AnalyticWriter
from analysis.category_filter import CategoryFilter
from analysis.category_validator import CategoryValidator
from telegram.new_market_logger import NewMarketLogger
from active_markets.market_lifecycle_manager import MarketLifecycleManager
from config.config_loader import ConfigLoader

logger = logging.getLogger(__name__)

class NewMarketsChecker:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.markets_reader = MarketsReader()
        self.analytic_writer = AnalyticWriter()
        self.category_filter = CategoryFilter()
        self.category_validator = CategoryValidator()
        self.new_market_logger = NewMarketLogger()
        self.lifecycle_manager = MarketLifecycleManager(bot_instance)
        self.config = ConfigLoader()
    
    def check_new_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
            markets = self.markets_reader.get_new_markets_after_time(
                datetime.now(timezone.utc) - timedelta(minutes=self.config.get_mkrt_analytic_time_min())
            )
            
            if not markets:
                # –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                logger.debug("‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
            unchecked_markets = []
            for market in markets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫ –≤ –ø—Ä–æ—à–ª–æ–º
                if self.analytic_writer.market_exists_in_analytic(market['slug']):
                    logger.debug(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {market['slug']} —É–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                if market['id'] in self.bot.active_markets:
                    logger.debug(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {market['slug']} —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                unchecked_markets.append(market)
            
            if not unchecked_markets:
                logger.debug("‚ÑπÔ∏è –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è")
                return
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unchecked_markets)} –Ω–æ–≤—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            for market in unchecked_markets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞ (–ö—Ä–∏–ø—Ç–æ/–°–ø–æ—Ä—Ç)
                category_validation = self.category_validator.validate_market_category(market['slug'])
                if not category_validation['is_valid']:
                    logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {market['slug']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {category_validation['status']}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
                    market_id = self.analytic_writer.insert_market_to_analytic(market)
                    if market_id:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                        self.analytic_writer.update_market_status(market_id, category_validation['status'])
                        logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {market['slug']} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ç–∞—Ç—É—Å–æ–º: {category_validation['status']}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–ª–µ–≤–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
                category_check = self.category_filter.check_category(market['slug'])
                if not category_check['is_boolean']:
                    logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {market['slug']} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É —Å —Å—Ç–∞—Ç—É—Å–æ–º "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
                    market_id = self.analytic_writer.insert_market_to_analytic(market)
                    if market_id:
                        self.analytic_writer.update_market_status(market_id, "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                        logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {market['slug']} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ç–∞—Ç—É—Å–æ–º: –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
                market_id = self.analytic_writer.insert_market_to_analytic(market)
                
                if market_id:
                    # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                    self.lifecycle_manager.start_market_analysis(market_id, market)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
                    self.new_market_logger.log_new_market(market)
                    logger.info(f"Started analysis for market: {market['slug']}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    analysis_thread = threading.Thread(
                        target=self.lifecycle_manager.analyze_market_continuously,
                        args=(market_id, market['slug'])
                    )
                    analysis_thread.daemon = True
                    analysis_thread.start()
        
        except Exception as e:
            error_msg = f"Error checking new markets: {e}"
            logger.error(error_msg)
            from telegram.error_logger import ErrorLogger
            error_logger = ErrorLogger()
            error_logger.log_error(error_msg) 