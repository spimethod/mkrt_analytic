import logging
import time
import threading
from datetime import datetime, timedelta
from config.config_loader import ConfigLoader
from analysis.market_analyzer_core import MarketAnalyzerCore
from database.analytic_updater import AnalyticUpdater
from telegram.market_stopped_logger import MarketStoppedLogger

logger = logging.getLogger(__name__)

class MarketLifecycleManager:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.config = ConfigLoader()
        self.analyzer = MarketAnalyzerCore()
        self.updater = AnalyticUpdater()
        self.stopped_logger = MarketStoppedLogger()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.analysis_time_minutes = self.config.get_analysis_time_minutes()
        self.max_retries = self.config.get_max_retries()
        self.retry_delay_seconds = self.config.get_retry_delay_seconds()
    
    def start_market_analysis(self, market_id, market):
        """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            self.bot.active_markets[market_id] = {
                'start_time': datetime.now(),
                'last_log': datetime.now(),
                'slug': market['slug'],
                'question': market['question']
            }
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {market['slug']} –Ω–∞—á–∞—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {market['slug']}: {e}")
    
    def analyze_market_continuously(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=self.analysis_time_minutes)
        retry_count = 0
        
        logger.info(f"Starting continuous analysis for market {slug} for {self.analysis_time_minutes} minutes")
        
        while datetime.now() < end_time and self.bot.running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                analysis_data = self.analyzer.analyze_market(slug)
                
                if analysis_data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                    self.updater.update_market_analysis(market_id, analysis_data)
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    retry_count += 1
                    if retry_count >= self.max_retries:
                        logger.error(f"Max retries reached for market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        logger.warning(f"Analysis failed for market {slug}, retry {retry_count}/{self.max_retries}")
                        time.sleep(self.retry_delay_seconds)
                        continue
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                time.sleep(60)
                
            except Exception as e:
                retry_count += 1
                error_msg = f"Error analyzing market {slug}: {e}"
                logger.error(error_msg)
                from telegram.error_logger import ErrorLogger
                error_logger = ErrorLogger()
                error_logger.log_error(error_msg, slug)
                
                if retry_count >= self.max_retries:
                    logger.error(f"Max retries reached for market {slug}, stopping analysis")
                    self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                    break
                else:
                    time.sleep(self.retry_delay_seconds)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        if market_id in self.bot.active_markets:
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
    
    def analyze_market_continuously_restored(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
            from database.active_markets_reader import ActiveMarketsReader
            reader = ActiveMarketsReader()
            market_info = reader.get_market_info(market_id)
            if not market_info:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ {market_id}")
                return
            
            created_at = market_info['created_at_analytic']
            if created_at.tzinfo is None:
                from datetime import timezone
                created_at = created_at.replace(tzinfo=timezone.utc)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            end_time = created_at + timedelta(minutes=self.analysis_time_minutes)
            current_time = datetime.now(timezone.utc)
            
            if current_time >= end_time:
                logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug} –∏—Å—Ç–µ–∫–ª–æ")
                self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            remaining_minutes = (end_time - current_time).total_seconds() / 60
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_minutes:.1f} –º–∏–Ω—É—Ç")
            
            retry_count = 0
            
            while datetime.now(timezone.utc) < end_time and self.bot.running:
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                    analysis_data = self.analyzer.analyze_market(slug)
                    
                    if analysis_data:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                        self.updater.update_market_analysis(market_id, analysis_data)
                        retry_count = 0
                    else:
                        retry_count += 1
                        if retry_count >= self.max_retries:
                            logger.error(f"Max retries reached for restored market {slug}, stopping analysis")
                            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                            break
                        else:
                            logger.warning(f"Analysis failed for restored market {slug}, retry {retry_count}/{self.max_retries}")
                            time.sleep(self.retry_delay_seconds)
                            continue
                    
                    # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                    time.sleep(60)
                    
                except Exception as e:
                    retry_count += 1
                    error_msg = f"Error analyzing restored market {slug}: {e}"
                    logger.error(error_msg)
                    from telegram.error_logger import ErrorLogger
                    error_logger = ErrorLogger()
                    error_logger.log_error(error_msg, slug)
                    
                    if retry_count >= self.max_retries:
                        logger.error(f"Max retries reached for restored market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        time.sleep(self.retry_delay_seconds)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            if market_id in self.bot.active_markets:
                self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}: {e}")
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
    
    def stop_market_analysis(self, market_id, status):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        if market_id in self.bot.active_markets:
            market_info = self.bot.active_markets[market_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            self.updater.update_market_analysis(market_id, {'status': status})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            market_data = {
                'question': market_info['question'],
                'slug': market_info['slug'],
                'status': status
            }
            self.stopped_logger.log_market_stopped(market_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
            del self.bot.active_markets[market_id]
            logger.info(f"Stopped analysis for market {market_info['slug']}") 