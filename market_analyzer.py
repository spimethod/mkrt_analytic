import asyncio
import logging
import re
from datetime import datetime
from playwright.async_api import async_playwright

logger = logging.getLogger(__name__)

class MarketAnalyzer:
    def __init__(self):
        self.browser = None
        self.page = None
        
    async def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(headless=True)
            self.page = await self.browser.new_page()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    async def close_driver(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.browser:
                await self.browser.close()
            if hasattr(self, 'playwright'):
                await self.playwright.stop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def close_driver_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.close_driver())
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def init_browser_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.init_browser())
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def get_market_data(self, slug):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                result = loop.run_until_complete(self.analyze_market(slug))
                return result
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {slug}: {e}")
            return None
    
    def analyze_market(self, slug):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.get_market_data(slug)
    
    async def analyze_market(self, slug):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            if not self.page:
                if not await self.init_browser():
                    return None
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä—ã–Ω–∫–∞
            url = f"https://polymarket.com/event/{slug}"
            await self.page.goto(url, wait_until='networkidle')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await self.page.wait_for_timeout(3000)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_data = await self.extract_market_data()
            
            return market_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {slug}: {e}")
            return None
    
    async def extract_market_data(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞"""
        try:
            data = {
                'market_exists': True,
                'is_boolean': True,
                'yes_percentage': 0,
                'volume': 'New',
                'contract_address': '',
                'status': '–≤ —Ä–∞–±–æ—Ç–µ'
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç Yes
            yes_percentage = await self.extract_yes_percentage()
            if yes_percentage:
                data['yes_percentage'] = yes_percentage
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º Volume
            volume = await self.extract_volume()
            if volume:
                data['volume'] = volume
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç
            contract = await self.extract_contract()
            if contract:
                data['contract_address'] = contract
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            return data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    async def extract_yes_percentage(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ Yes –∏–∑ '67% chance' –∏ 'Yes 67¬¢'"""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º chance
            chance_elements = await self.page.query_selector_all('div:has-text("chance"), span:has-text("chance")')
            chance_percentage = None
            
            for element in chance_elements:
                text = await element.text_content()
                if text:
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å chance: '{text.strip()}'")
                    
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "67% chance"
                    percentage_match = re.search(r'(\d{1,2}(?:\.\d+)?)\s*%\s*chance', text, re.IGNORECASE)
                    if percentage_match:
                        percentage = float(percentage_match.group(1))
                        if 0 <= percentage <= 100:
                            chance_percentage = percentage
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ chance: {percentage}%")
                            break
            
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å —Ü–µ–Ω–æ–π Yes
            yes_price_elements = await self.page.query_selector_all('div:has-text("Yes"), span:has-text("Yes"), button:has-text("Yes")')
            yes_price_percentage = None
            
            for element in yes_price_elements:
                text = await element.text_content()
                if text:
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å Yes: '{text.strip()}'")
                    
                    # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Yes 67¬¢"
                    price_match = re.search(r'Yes\s*(\d{1,2}(?:\.\d+)?)\s*¬¢', text)
                    if price_match:
                        price_cents = float(price_match.group(1))
                        if 0 <= price_cents <= 100:
                            yes_price_percentage = price_cents
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Ü–µ–Ω—ã Yes: {price_cents}%")
                            break
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            if chance_percentage is not None and yes_price_percentage is not None:
                if abs(chance_percentage - yes_price_percentage) <= 2:  # –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ 2%
                    logger.info(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç: {chance_percentage}% = {yes_price_percentage}%")
                    return chance_percentage
                else:
                    logger.warning(f"‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: chance={chance_percentage}%, price={yes_price_percentage}%")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—ã Yes, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ
                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—ã Yes: {yes_price_percentage}%")
                    return yes_price_percentage
            elif yes_price_percentage is not None:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ü–µ–Ω—ã Yes: {yes_price_percentage}%")
                return yes_price_percentage
            elif chance_percentage is not None:
                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ chance: {chance_percentage}%")
                return chance_percentage
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç
            percentage_elements = await self.page.query_selector_all('div:has-text("%"), span:has-text("%")')
            
            for element in percentage_elements:
                text = await element.text_content()
                if text:
                    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å %: '{text.strip()}'")
                    
                    # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ 1-2 —Ü–∏—Ñ—Ä—ã)
                    percentage_match = re.search(r'(\d{1,2}(?:\.\d+)?)\s*%', text)
                    if percentage_match:
                        percentage = float(percentage_match.group(1))
                        if 0 <= percentage <= 100:
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç Yes: {percentage}%")
                            return percentage
            
            return 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ Yes: {e}")
            return 0
    
    async def extract_volume(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Volume –∏–∑ '$264,156 Vol.'"""
        try:
            # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å Volume - –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
            selectors = [
                '[class*="volume"]',
                '[class*="Vol"]',
                '[class*="Volume"]',
                'div:has-text("Vol")',
                'span:has-text("Vol")',
                'p:has-text("Vol")',
                '[class*="trading"]',
                '[class*="market"]'
            ]
            
            for selector in selectors:
                elements = await self.page.query_selector_all(selector)
                for element in elements:
                    text = await element.text_content()
                    if text:
                        # –ò—â–µ–º —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö —Å "Vol"
                        volume_match = re.search(r'\$([\d,]+(?:\.\d{2})?)\s*Vol', text, re.IGNORECASE)
                        if volume_match:
                            volume = volume_match.group(1).replace(',', '')
                            logger.info(f"–ù–∞–π–¥–µ–Ω Volume: ${volume} Vol")
                            return f"${float(volume):,.2f}"
                        
                        # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
                        dollar_match = re.search(r'\$([\d,]+(?:\.\d{2})?)', text)
                        if dollar_match:
                            volume = dollar_match.group(1).replace(',', '')
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ (–Ω–µ —Ü–µ–Ω–∞)
                            if float(volume) > 1000:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ü–µ–Ω—ã
                                logger.info(f"–ù–∞–π–¥–µ–Ω Volume: ${volume}")
                                return f"${float(volume):,.2f}"
            
            return 'New'
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Volume: {e}")
            return 'New'
    
    async def extract_contract(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ Show more -> –ª–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç"""
        try:
            # –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Show more"
            show_more_buttons = await self.page.query_selector_all('button:has-text("Show more")')
            
            for button in show_more_buttons:
                try:
                    # –ö–ª–∏–∫–∞–µ–º –Ω–∞ Show more
                    await button.click()
                    await self.page.wait_for_timeout(1000)
                    
                    # –ò—â–µ–º –ª–µ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Å–ø–∏—Å–∫–µ)
                    contract_elements = await self.page.query_selector_all('[class*="contract"], [class*="address"], a[href*="0x"]')
                    
                    for element in contract_elements:
                        # –ü–æ–ª—É—á–∞–µ–º href –∏–ª–∏ —Ç–µ–∫—Å—Ç
                        href = await element.get_attribute('href')
                        text = await element.text_content()
                        
                        if href and '0x' in href:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ URL
                            contract_match = re.search(r'0x[a-fA-F0-9]{40}', href)
                            if contract_match:
                                contract = contract_match.group()
                                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ href: {contract}")
                                return contract
                        
                        if text and '0x' in text:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞
                            contract_match = re.search(r'0x[a-fA-F0-9]{40}', text)
                            if contract_match:
                                contract = contract_match.group()
                                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞: {contract}")
                                return contract
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                    contract_links = await self.page.query_selector_all('a[href*="0x"], [class*="contract"]')
                    if contract_links:
                        await contract_links[0].click()
                        await self.page.wait_for_timeout(2000)
                        
                        # –ü–æ–ª—É—á–∞–µ–º URL –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                        current_url = self.page.url
                        if '0x' in current_url:
                            contract_match = re.search(r'0x[a-fA-F0-9]{40}', current_url)
                            if contract_match:
                                contract = contract_match.group()
                                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ URL: {contract}")
                                return contract
                
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Show more: {e}")
                    continue
            
            return ''
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return '' 