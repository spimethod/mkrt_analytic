import asyncio
import time
import httpx
import logging
from config import TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, ANALYSIS_TIME_MINUTES, LOGGING_INTERVAL_MINUTES
from datetime import datetime

logger = logging.getLogger(__name__)

class TelegramLogger:
    def __init__(self):
        self.token = TELEGRAM_TOKEN
        self.chat_id = TELEGRAM_CHAT_ID
        self.last_message_time = 0
        self.min_interval = 2.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        self.http_client = httpx.AsyncClient(
            limits=httpx.Limits(
                max_keepalive_connections=5,
                max_connections=10,
                keepalive_expiry=30.0
            ),
            timeout=httpx.Timeout(30.0)
        )
    
    async def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏"""
        if not self.token or not self.chat_id:
            logger.warning("Telegram bot not configured, skipping message")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        current_time = time.time()
        if current_time - self.last_message_time < self.min_interval:
            wait_time = self.min_interval - (current_time - self.last_message_time)
            logger.info(f"Waiting {wait_time:.1f}s to avoid flood control")
            await asyncio.sleep(wait_time)
        
        try:
            url = f"https://api.telegram.org/bot{self.token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
            async with self.http_client.stream('POST', url, json=data) as response:
                if response.status_code == 200:
                    self.last_message_time = time.time()
                    logger.info("Telegram message sent successfully")
                    return True
                else:
                    error_text = await response.aread()
                    logger.error(f"Telegram API error: {response.status_code} - {error_text}")
                    return False
                    
        except httpx.TimeoutException:
            logger.error("Telegram request timeout")
            return False
        except httpx.PoolTimeout:
            logger.error("Telegram connection pool timeout - too many concurrent requests")
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—É–ª–æ–º
            self.min_interval = min(self.min_interval * 1.5, 30.0)
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Telegram message: {e}")
            return False
    
    def send_message_sync(self, message):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.send_message(message))
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"Error in sync telegram send: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.http_client.aclose()
    
    def log_new_market(self, market_data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞"""
        message = f"""
üÜï <b>–ù–æ–≤—ã–π —Ä—ã–Ω–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω</b>

üìä <b>–í–æ–ø—Ä–æ—Å:</b> {market_data['question']}
üîó <b>Slug:</b> {market_data['slug']}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {market_data['created_at']}
‚úÖ <b>–ê–∫—Ç–∏–≤–µ–Ω:</b> {'–î–∞' if market_data['active'] else '–ù–µ—Ç'}
üìö <b>–û—Ä–¥–µ—Ä –±—É–∫:</b> {'–í–∫–ª—é—á–µ–Ω' if market_data['enable_order_book'] else '–û—Ç–∫–ª—é—á–µ–Ω'}
        """
        self.send_message_sync(message)
    
    def log_market_data(self, market_data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        message = f"""
üìä <b>–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω)</b>

üìã <b>–í–æ–ø—Ä–æ—Å:</b> {market_data['question']}
üîó <b>Slug:</b> {market_data['slug']}
‚úÖ <b>–†—ã–Ω–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:</b> {'–î–∞' if market_data['market_exists'] else '–ù–µ—Ç'}
üî¢ <b>–ë—É–ª–µ–≤—ã–π:</b> {'–î–∞' if market_data['is_boolean'] else '–ù–µ—Ç'}
üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç Yes:</b> {market_data['yes_percentage']}%
üí∞ <b>–û—Ä–¥–µ—Ä –±—É–∫ Yes:</b> ${market_data['yes_order_book_total']:,.2f}
üí∞ <b>–û—Ä–¥–µ—Ä –±—É–∫ No:</b> ${market_data['no_order_book_total']:,.2f}
üìÑ <b>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</b> {market_data['contract_address']}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {market_data['status']}
‚è∞ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {market_data['last_updated']}
        """
        self.send_message_sync(message)
    
    def log_market_stopped(self, market_data):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        message = f"""
üõë <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω</b>

üìã <b>–í–æ–ø—Ä–æ—Å:</b> {market_data['question']}
üîó <b>Slug:</b> {market_data['slug']}
üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {market_data['status']}
‚è∞ <b>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        self.send_message_sync(message)
    
    def log_error(self, error_message, market_slug=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞</b>

üîó <b>–†—ã–Ω–æ–∫:</b> {market_slug if market_slug else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {error_message}
‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        self.send_message_sync(message)
    
    def log_bot_start(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        message = f"""
üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>

‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìä <b>–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:</b> {ANALYSIS_TIME_MINUTES} –º–∏–Ω—É—Ç
üîÑ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b> {LOGGING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç
        """
        self.send_message_sync(message)
    
    def log_bot_stop(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        message = f"""
üõë <b>–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

‚è∞ <b>–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """
        self.send_message_sync(message) 