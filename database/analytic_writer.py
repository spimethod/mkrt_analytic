import logging
from datetime import datetime, timezone
from database.database_connection import DatabaseConnection

logger = logging.getLogger(__name__)

class AnalyticWriter:
    def __init__(self):
        self.db_connection = DatabaseConnection()
    
    def insert_market_to_analytic(self, market_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É mkrt_analytic"""
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä—ã–Ω–∫–∞: {market_data.get('slug', 'unknown')}")
            
            conn = self.db_connection.get_connection()
            if not conn:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä—ã–Ω–æ–∫ —Å —Ç–∞–∫–∏–º slug
            if self.market_exists_in_analytic(market_data['slug']):
                logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {market_data['slug']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ë–î")
                # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä—ã–Ω–∫–∞
                cursor = conn.cursor()
                cursor.execute("SELECT id FROM mkrt_analytic WHERE slug = %s", (market_data['slug'],))
                result = cursor.fetchone()
                cursor.close()
                return result[0] if result else None
            
            logger.info(f"üìù –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫: {market_data['slug']}")
            
            cursor = conn.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            current_time = datetime.now(timezone.utc)
            insert_data = (
                market_data['id'],
                market_data['question'],
                current_time,  # created_at
                True,  # active –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                True,  # enable_order_book –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                market_data['slug'],
                market_data.get('market_exists', True),
                market_data.get('is_boolean', True),
                market_data.get('yes_percentage', 0),
                market_data.get('volume', 'New'),
                market_data.get('contract_address', ''),
                market_data.get('status', '–≤ —Ä–∞–±–æ—Ç–µ'),
                current_time,  # last_updated
                current_time   # created_at_analytic
            )
            
            cursor.execute("""
                INSERT INTO mkrt_analytic 
                (polymarket_id, question, created_at, active, enable_order_book, slug, 
                 market_exists, is_boolean, yes_percentage, volume, contract_address, status, last_updated, created_at_analytic)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (polymarket_id) DO UPDATE SET
                last_updated = EXCLUDED.last_updated
                RETURNING id
            """, insert_data)
            
            result = cursor.fetchone()
            if result:
                market_id = result[0]
                conn.commit()
                cursor.close()
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {market_data['slug']} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω! ID: {market_id}")
                return market_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏")
                conn.rollback()
                cursor.close()
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ë–î: {e}")
            if conn:
                conn.rollback()
            return None
    
    def market_exists_in_analytic(self, slug):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ slug"""
        try:
            conn = self.db_connection.get_connection()
            if not conn:
                return False
            
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM mkrt_analytic WHERE slug = %s", (slug,))
            result = cursor.fetchone()
            cursor.close()
            
            return result is not None
        except Exception as e:
            logger.error(f"Error checking market existence: {e}")
            return False
    
    def update_market_status(self, market_id, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞"""
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞ ID: {market_id} –Ω–∞ '{status}'")
            
            conn = self.db_connection.get_connection()
            if not conn:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return False
            
            cursor = conn.cursor()
            current_time = datetime.now(timezone.utc)
            
            cursor.execute("""
                UPDATE mkrt_analytic 
                SET status = %s, last_updated = %s
                WHERE id = %s
            """, (status, current_time, market_id))
            
            conn.commit()
            cursor.close()
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞ ID: {market_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä—ã–Ω–∫–∞: {e}")
            if conn:
                conn.rollback()
            return False 