import logging
import threading
from datetime import datetime
from database.active_markets_reader import ActiveMarketsReader
from database.analytic_updater import AnalyticUpdater
from analysis.category_filter import CategoryFilter
from active_markets.market_lifecycle_manager import MarketLifecycleManager

logger = logging.getLogger(__name__)

class StuckMarketsRestorer:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.reader = ActiveMarketsReader()
        self.updater = AnalyticUpdater()
        self.category_filter = CategoryFilter()
        self.lifecycle_manager = MarketLifecycleManager(bot_instance)
    
    def restore_stuck_markets(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö —Ä—ã–Ω–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Ä—ã–Ω–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
            in_progress_markets = self.reader.get_in_progress_markets()
            
            for market in in_progress_markets:
                market_id = market['id']
                slug = market['slug']
                
                logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—ã–Ω–æ–∫: {slug}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                try:
                    category_check = self.category_filter.check_category(slug)
                    if not category_check['is_boolean']:
                        logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        self.updater.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç'})
                        continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {slug}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                self.bot.active_markets[market_id] = {
                    'start_time': datetime.now(),
                    'last_log': datetime.now(),
                    'slug': slug,
                    'question': market.get('question', f"Market: {slug}")
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                analysis_thread = threading.Thread(
                    target=self.lifecycle_manager.analyze_market_continuously_restored,
                    args=(market_id, slug)
                )
                analysis_thread.daemon = True
                analysis_thread.start()
                
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(self.bot.active_markets)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö —Ä—ã–Ω–∫–æ–≤: {e}") 