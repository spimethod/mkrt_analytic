#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã markets
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python update_markets_table.py
"""

import psycopg2
import logging
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'host': 'shinkansen.proxy.rlwy.net',
    'port': 13578,
    'database': 'railway',
    'user': 'postgres',
    'password': 'lfNeFtRHaVGdQka0wPXEfJdvxrqX0xzw'
}

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_table_exists(conn, table_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = %s
            );
        """, (table_name,))
        exists = cursor.fetchone()[0]
        cursor.close()
        return exists
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return False

def get_table_structure(conn, table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = %s
            ORDER BY ordinal_position;
        """, (table_name,))
        columns = cursor.fetchall()
        cursor.close()
        return columns
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return []

def backup_existing_data(conn):
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("SELECT COUNT(*) FROM markets")
        count = cursor.fetchone()[0]
        
        if count == 0:
            logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ markets –ø—É—Å—Ç–∞—è, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            cursor.close()
            return True
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ markets")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("""
            CREATE TABLE markets_backup AS 
            SELECT * FROM markets
        """)
        
        logger.info("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: markets_backup")
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_new_table(conn):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã markets"""
    try:
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cursor.execute("""
            CREATE TABLE markets_new (
                id SERIAL PRIMARY KEY,
                question TEXT NOT NULL,
                slug VARCHAR(255) NOT NULL UNIQUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cursor.execute("CREATE INDEX idx_markets_slug ON markets_new(slug)")
        cursor.execute("CREATE INDEX idx_markets_created_at ON markets_new(created_at)")
        
        logger.info("‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ markets_new —Å–æ–∑–¥–∞–Ω–∞")
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def copy_data_to_new_table(conn):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
    try:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        cursor.execute("SELECT COUNT(*) FROM markets_backup")
        count = cursor.fetchone()[0]
        
        if count == 0:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            cursor.close()
            return True
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("""
            INSERT INTO markets_new (id, question, slug, created_at)
            SELECT id, question, slug, created_at
            FROM markets_backup
            WHERE id IS NOT NULL 
              AND question IS NOT NULL 
              AND slug IS NOT NULL
        """)
        
        copied_count = cursor.rowcount
        logger.info(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {copied_count} –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def replace_old_table(conn):
    """–ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–æ–≤–æ–π"""
    try:
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("DROP TABLE IF EXISTS markets")
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("ALTER TABLE markets_new RENAME TO markets")
        
        logger.info("‚úÖ –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–æ–≤–æ–π")
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def verify_new_table(conn):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'markets'
            ORDER BY ordinal_position
        """)
        columns = cursor.fetchall()
        
        logger.info("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã markets:")
        for column in columns:
            logger.info(f"  - {column[0]}: {column[1]} ({'NULL' if column[2] == 'YES' else 'NOT NULL'})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor.execute("SELECT COUNT(*) FROM markets")
        count = cursor.fetchone()[0]
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {count}")
        
        cursor.close()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False

def cleanup_backup(conn):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        cursor = conn.cursor()
        cursor.execute("DROP TABLE IF EXISTS markets_backup")
        logger.info("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞")
        cursor.close()
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã markets")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã markets
        if not check_table_exists(conn, 'markets'):
            logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ markets –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            if create_new_table(conn):
                conn.commit()
                logger.info("‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ markets —Å–æ–∑–¥–∞–Ω–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        logger.info("üìã –¢–µ–∫—É—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã markets:")
        columns = get_table_structure(conn, 'markets')
        for column in columns:
            logger.info(f"  - {column[0]}: {column[1]} ({'NULL' if column[2] == 'YES' else 'NOT NULL'})")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã markets!")
        logger.info("üìã –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ:")
        logger.info("  - id (SERIAL PRIMARY KEY)")
        logger.info("  - question (TEXT NOT NULL)")
        logger.info("  - slug (VARCHAR(255) NOT NULL UNIQUE)")
        logger.info("  - created_at (TIMESTAMP DEFAULT CURRENT_TIMESTAMP)")
        
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not backup_existing_data(conn):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        if not create_new_table(conn):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
            return
        
        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if not copy_data_to_new_table(conn):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –ó–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        if not replace_old_table(conn):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        if not verify_new_table(conn):
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã")
            return
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã markets –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        cleanup_backup(conn)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        conn.rollback()
    finally:
        conn.close()
        logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main() 