import time
import threading
import schedule
import logging
from datetime import datetime, timedelta, timezone
from database import DatabaseManager
from market_analyzer import MarketAnalyzer
from telegram_bot import TelegramLogger
from config import ANALYSIS_TIME_MINUTES, MAX_RETRIES, RETRY_DELAY_SECONDS, LOGGING_INTERVAL_MINUTES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class MarketAnalysisBot:
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.market_analyzer = MarketAnalyzer()
        self.telegram_logger = TelegramLogger()
        self.active_markets = {}  # {market_id: {'start_time': datetime, 'last_log': datetime}}
        self.running = False
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Market Analysis Bot")
        self.telegram_logger.log_bot_start()
        self.running = True
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Ä—ã–Ω–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.restore_in_progress_markets()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        schedule.every(30).seconds.do(self.check_new_markets)
        schedule.every(1).minutes.do(self.update_active_markets)
        schedule.every(10).minutes.do(self.log_market_summaries)
        schedule.every(5).minutes.do(self.check_recently_closed_markets)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self.run_scheduler)
        scheduler_thread.daemon = True
        scheduler_thread.start()
        
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            self.stop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Market Analysis Bot")
        self.running = False
        self.telegram_logger.log_bot_stop()
        self.market_analyzer.close_driver()
        self.db_manager.close_connections()
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        while self.running:
            schedule.run_pending()
            time.sleep(1)
    
    def add_market_by_slug(self, slug):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É –ø–æ slug"""
        try:
            logger.info(f"üîÑ –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –ø–æ slug: {slug}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ
            if self.db_manager.market_exists_in_analytic(slug):
                logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {slug} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ë–î")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            market_data = {
                'id': 0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
                'question': f"Market: {slug}",
                'slug': slug
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
            market_id = self.db_manager.insert_market_to_analytic(market_data)
            
            if market_id:
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ë–î")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑
                self.active_markets[market_id] = {
                    'start_time': datetime.now(),
                    'last_log': datetime.now(),
                    'slug': slug,
                    'question': market_data['question']
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                analysis_thread = threading.Thread(
                    target=self.analyze_market_continuously,
                    args=(market_id, slug)
                )
                analysis_thread.daemon = True
                analysis_thread.start()
                
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–Ω–æ–∫ {slug}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ {slug}: {e}")
            return False
    
    def restore_in_progress_markets(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö —Ä—ã–Ω–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ —Ä—ã–Ω–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
            in_progress_markets = self.db_manager.get_in_progress_markets()
            
            for market in in_progress_markets:
                market_id = market['id']
                slug = market['slug']
                
                logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—ã–Ω–æ–∫: {slug}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                try:
                    category_check = self.market_analyzer.check_market_category_sync(slug)
                    if not category_check['is_boolean']:
                        logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç'})
                        continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {slug}: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                self.active_markets[market_id] = {
                    'start_time': datetime.now(),
                    'last_log': datetime.now(),
                    'slug': slug,
                    'question': market.get('question', f"Market: {slug}")
                }
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                analysis_thread = threading.Thread(
                    target=self.analyze_market_continuously_restored,
                    args=(market_id, slug)
                )
                analysis_thread.daemon = True
                analysis_thread.start()
                
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(self.active_markets)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
    
    def check_recently_closed_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ä—ã–Ω–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏, –∑–∞–∫—Ä—ã—Ç—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
            recently_closed = self.db_manager.get_recently_closed_markets()
            
            current_time = datetime.now()
            
            for market in recently_closed:
                market_id = market['id']
                slug = market['slug']
                created_at = market['created_at_analytic']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                analysis_end_time_from_created = created_at + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                remaining_time_from_created = (analysis_end_time_from_created - current_time).total_seconds() / 60
                
                if current_time < analysis_end_time_from_created:
                    logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –±—ã–ª –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç! –í—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                    try:
                        category_check = self.market_analyzer.check_market_category_sync(slug)
                        if not category_check['is_boolean']:
                            logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                            continue
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {slug}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    
                    # –†—ã–Ω–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    self.db_manager.update_market_analysis(market_id, {'status': '–≤ —Ä–∞–±–æ—Ç–µ'})
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                    self.active_markets[market_id] = {
                        'start_time': datetime.now(),
                        'last_log': datetime.now(),
                        'slug': slug,
                        'question': market.get('question', f"Market: {slug}")
                    }
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    analysis_thread = threading.Thread(
                        target=self.analyze_market_continuously_restored,
                        args=(market_id, slug)
                    )
                    analysis_thread.daemon = True
                    analysis_thread.start()
                    
                    logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
    
    def check_new_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        try:
            markets = self.db_manager.get_new_markets()
            
            for market in markets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                if market['id'] not in self.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                    try:
                        category_check = self.market_analyzer.check_market_category_sync(market['slug'])
                        if not category_check['is_boolean']:
                            logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {market['slug']} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {market['slug']}: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
                    market_id = self.db_manager.insert_market_to_analytic(market)
                    
                    if market_id:
                        # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                        self.active_markets[market_id] = {
                            'start_time': datetime.now(),
                            'last_log': datetime.now(),
                            'slug': market['slug'],
                            'question': market['question']
                        }
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
                        self.telegram_logger.log_new_market(market)
                        logger.info(f"Started analysis for market: {market['slug']}")
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        analysis_thread = threading.Thread(
                            target=self.analyze_market_continuously,
                            args=(market_id, market['slug'])
                        )
                        analysis_thread.daemon = True
                        analysis_thread.start()
        
        except Exception as e:
            error_msg = f"Error checking new markets: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)
    
    def analyze_market_continuously(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=ANALYSIS_TIME_MINUTES)
        retry_count = 0
        
        logger.info(f"Starting continuous analysis for market {slug} for {ANALYSIS_TIME_MINUTES} minutes")
        
        while datetime.now() < end_time and self.running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                analysis_data = self.market_analyzer.analyze_market(slug)
                
                if analysis_data:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                    self.db_manager.update_market_analysis(market_id, analysis_data)
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    retry_count += 1
                    if retry_count >= MAX_RETRIES:
                        logger.error(f"Max retries reached for market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        logger.warning(f"Analysis failed for market {slug}, retry {retry_count}/{MAX_RETRIES}")
                        time.sleep(RETRY_DELAY_SECONDS)
                        continue
                
                # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                time.sleep(60)
                
            except Exception as e:
                retry_count += 1
                error_msg = f"Error analyzing market {slug}: {e}"
                logger.error(error_msg)
                self.telegram_logger.log_error(error_msg, slug)
                
                if retry_count >= MAX_RETRIES:
                    logger.error(f"Max retries reached for market {slug}, stopping analysis")
                    self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                    break
                else:
                    time.sleep(RETRY_DELAY_SECONDS)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        if market_id in self.active_markets:
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
    
    def analyze_market_continuously_restored(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
            market_info = self.db_manager.get_market_info(market_id)
            if not market_info:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ {market_id}")
                return
            
            created_at = market_info['created_at_analytic']
            if created_at.tzinfo is None:
                created_at = created_at.replace(tzinfo=timezone.utc)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
            end_time = created_at + timedelta(minutes=ANALYSIS_TIME_MINUTES)
            current_time = datetime.now(timezone.utc)
            
            if current_time >= end_time:
                logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug} –∏—Å—Ç–µ–∫–ª–æ")
                self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
            remaining_minutes = (end_time - current_time).total_seconds() / 60
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_minutes:.1f} –º–∏–Ω—É—Ç")
            
            retry_count = 0
            
            while datetime.now(timezone.utc) < end_time and self.running:
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                    analysis_data = self.market_analyzer.analyze_market(slug)
                    
                    if analysis_data:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                        self.db_manager.update_market_analysis(market_id, analysis_data)
                        retry_count = 0
                    else:
                        retry_count += 1
                        if retry_count >= MAX_RETRIES:
                            logger.error(f"Max retries reached for restored market {slug}, stopping analysis")
                            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                            break
                        else:
                            logger.warning(f"Analysis failed for restored market {slug}, retry {retry_count}/{MAX_RETRIES}")
                            time.sleep(RETRY_DELAY_SECONDS)
                            continue
                    
                    # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                    time.sleep(60)
                    
                except Exception as e:
                    retry_count += 1
                    error_msg = f"Error analyzing restored market {slug}: {e}"
                    logger.error(error_msg)
                    self.telegram_logger.log_error(error_msg, slug)
                    
                    if retry_count >= MAX_RETRIES:
                        logger.error(f"Max retries reached for restored market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        time.sleep(RETRY_DELAY_SECONDS)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
            if market_id in self.active_markets:
                self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}: {e}")
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
    
    def stop_market_analysis(self, market_id, status):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        if market_id in self.active_markets:
            market_info = self.active_markets[market_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            self.db_manager.update_market_analysis(market_id, {'status': status})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            market_data = {
                'question': market_info['question'],
                'slug': market_info['slug'],
                'status': status
            }
            self.telegram_logger.log_market_stopped(market_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
            del self.active_markets[market_id]
            logger.info(f"Stopped analysis for market {market_info['slug']}")
    
    def update_active_markets(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        try:
            active_markets = self.db_manager.get_active_markets()
            
            for market in active_markets:
                if market['id'] in self.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                    start_time = self.active_markets[market['id']]['start_time']
                    if datetime.now() - start_time > timedelta(minutes=ANALYSIS_TIME_MINUTES):
                        self.stop_market_analysis(market['id'], "–∑–∞–∫—Ä—ã—Ç")
        
        except Exception as e:
            error_msg = f"Error updating active markets: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)
    
    def log_market_summaries(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫–∞–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        try:
            active_markets = self.db_manager.get_active_markets()
            
            for market in active_markets:
                if market['id'] in self.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    last_log = self.active_markets[market['id']]['last_log']
                    if datetime.now() - last_log > timedelta(minutes=LOGGING_INTERVAL_MINUTES):
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
                        self.telegram_logger.log_market_data(market)
                        self.active_markets[market['id']]['last_log'] = datetime.now()
        
        except Exception as e:
            error_msg = f"Error logging market summaries: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = MarketAnalysisBot()
    try:
        bot.start()
    except Exception as e:
        logger.error(f"Fatal error in main: {e}")
        bot.stop()

if __name__ == "__main__":
    main() 