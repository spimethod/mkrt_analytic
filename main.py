import time
import threading
import schedule
import logging
import sys
from datetime import datetime, timedelta, timezone
from database import DatabaseManager
from market_analyzer import MarketAnalyzer
from telegram_bot import TelegramLogger
from config import ANALYSIS_TIME_MINUTES, MAX_RETRIES, RETRY_DELAY_SECONDS, LOGGING_INTERVAL_MINUTES, PING_INTERVAL_MINUTES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging_config

logger = logging.getLogger(__name__)

class MarketAnalysisBot:
    def __init__(self):
        self.db_manager = DatabaseManager()
        self.market_analyzer = MarketAnalyzer()
        self.telegram_logger = TelegramLogger()
        self.active_markets = {}  # {market_id: {'start_time': datetime, 'last_log': datetime}}
        self.running = False
        self.bot_start_time = None  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Market Analysis Bot...")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            self.running = True
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            self.bot_start_time = datetime.now(timezone.utc)
            logger.info(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {self.bot_start_time}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ä—ã–Ω–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            self.close_expired_markets()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ä—ã–Ω–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            self.check_recently_closed_markets()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Ä—ã–Ω–∫–æ–≤
            self.verify_last_3_markets_timing()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            self.restore_in_progress_markets()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.run_scheduler()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.telegram_logger.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Market Analysis Bot")
        self.running = False
        self.telegram_logger.log_bot_stop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç Telegram
        try:
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                loop.run_until_complete(self.telegram_logger.close())
            finally:
                loop.close()
        except Exception as e:
            logger.error(f"Error closing Telegram HTTP client: {e}")
        
        self.market_analyzer.close_driver_sync()
        self.db_manager.close_connections()
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            logger.info("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.telegram_logger.log_bot_start()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
            schedule.every(30).seconds.do(self.check_new_markets)
            schedule.every(1).minutes.do(self.update_active_markets)
            schedule.every(10).minutes.do(self.log_market_summaries)
            
            logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                schedule.run_pending()
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            self.telegram_logger.log_error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    def check_new_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—ã–Ω–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            if self.bot_start_time:
                markets = self.db_manager.get_new_markets_after_time(self.bot_start_time)
                logger.info(f"Checking for new markets created after {self.bot_start_time}")
            else:
                markets = self.db_manager.get_new_markets()
                logger.warning("Bot start time not set, using all markets")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Ä—ã–Ω–∫–æ–≤ –∏–∑ mkrt_analytic
            markets_in_progress = self.db_manager.get_markets_in_progress()
            in_progress_slugs = {market['slug'] for market in markets_in_progress}
            logger.info(f"Found {len(in_progress_slugs)} markets already in progress")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            closed_slugs = self.db_manager.get_closed_markets_slugs()
            logger.info(f"Found {len(closed_slugs)} closed markets to exclude")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            exceeded_markets = self.db_manager.get_markets_exceeded_analysis_time(ANALYSIS_TIME_MINUTES)
            exceeded_slugs = {market['slug'] for market in exceeded_markets}
            
            if exceeded_slugs:
                logger.info(f"Found {len(exceeded_slugs)} markets that exceeded analysis time: {exceeded_slugs}")
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä—ã–Ω–∫–∏, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏–µ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                for market in exceeded_markets:
                    self.db_manager.update_market_analysis(market['id'], {'status': '–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)'})
                    logger.info(f"Closed market {market['slug']} - analysis time exceeded")
            
            for market in markets:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫ (–ø–æ ID –∏ slug)
                market_id = market['id']
                market_slug = market['slug']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                if market_slug in in_progress_slugs:
                    logger.info(f"Market {market_slug} is already in progress in database, skipping")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                if market_slug in closed_slugs:
                    logger.info(f"Market {market_slug} is already closed, skipping")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ —Ä—ã–Ω–æ–∫ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                if market_slug in exceeded_slugs:
                    logger.info(f"Market {market_slug} exceeded analysis time, skipping")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
                if market_id not in self.active_markets:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ slug
                    slug_in_use = any(
                        active_market['slug'] == market_slug 
                        for active_market in self.active_markets.values()
                    )
                    
                    if not slug_in_use:
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
                        analytic_market_id = self.db_manager.insert_market_to_analytic(market)
                        
                        if analytic_market_id:
                            # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
                            self.active_markets[market_id] = {
                                'start_time': datetime.now(timezone.utc),
                                'last_log': datetime.now(timezone.utc),
                                'slug': market['slug'],
                                'question': market['question']
                            }
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
                            self.telegram_logger.log_new_market(market)
                            logger.info(f"Started analysis for NEW market: {market['slug']} (created: {market['created_at']})")
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            analysis_thread = threading.Thread(
                                target=self.analyze_market_continuously,
                                args=(analytic_market_id, market['slug'])
                            )
                            analysis_thread.daemon = True
                            analysis_thread.start()
                        else:
                            logger.warning(f"Failed to insert market {market_slug} to analytic database")
                    else:
                        logger.info(f"Market {market_slug} is already being analyzed, skipping")
                else:
                    logger.info(f"Market ID {market_id} is already in active markets, skipping")
        
        except Exception as e:
            error_msg = f"Error checking new markets: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)
    
    def analyze_market_continuously(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        start_time = datetime.now(timezone.utc)
        end_time = start_time + timedelta(minutes=ANALYSIS_TIME_MINUTES)
        retry_count = 0
        
        logger.info(f"Starting continuous analysis for market {slug} for {ANALYSIS_TIME_MINUTES} minutes")
        
        while datetime.now(timezone.utc) < end_time and self.running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                analysis_data = self.market_analyzer.get_market_data(slug)
                
                if analysis_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä—ã–Ω–æ–∫ –±—É–ª–µ–≤—ã–º
                    if not analysis_data.get('is_boolean', True):
                        reason = analysis_data.get('reason', 'non_boolean')
                        if reason.startswith('category_'):
                            category = reason.replace('category_', '')
                            logger.info(f"Market {slug} is {category.upper()} category - closing analysis")
                            self.stop_market_analysis(market_id, f"–∑–∞–∫—Ä—ã—Ç ({category})")
                        else:
                            logger.info(f"Market {slug} is not boolean - closing analysis")
                            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç (–Ω–µ –±—É–ª–µ–≤—ã–π)")
                        break
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã
                    db_data = {
                        'market_exists': analysis_data.get('market_exists', False),
                        'is_boolean': analysis_data.get('is_boolean', False),
                        'yes_percentage': analysis_data.get('yes_percentage', 0),
                        'volume': analysis_data.get('volume', 'New'),
                        'contract_address': analysis_data.get('contract_address', ''),
                        'status': '–≤ —Ä–∞–±–æ—Ç–µ'
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                    success = self.db_manager.update_market_analysis(market_id, db_data)
                    if success:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {slug}: %Yes={db_data['yes_percentage']}%, Volume={db_data['volume']}, Contract={db_data['contract_address'][:10]}...")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    retry_count += 1
                    if retry_count >= MAX_RETRIES:
                        logger.error(f"Max retries reached for market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        logger.warning(f"Analysis failed for market {slug}, retry {retry_count}/{MAX_RETRIES}")
                        time.sleep(RETRY_DELAY_SECONDS)
                        continue
                
                # –ñ–¥–µ–º PING_INTERVAL_MINUTES –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                time.sleep(PING_INTERVAL_MINUTES * 60)
                
            except Exception as e:
                retry_count += 1
                error_msg = f"Error analyzing market {slug}: {e}"
                logger.error(error_msg)
                self.telegram_logger.log_error(error_msg, slug)
                
                if retry_count >= MAX_RETRIES:
                    logger.error(f"Max retries reached for market {slug}, stopping analysis")
                    self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                    break
                else:
                    time.sleep(RETRY_DELAY_SECONDS)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        if market_id in self.active_markets:
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
    
    def stop_market_analysis(self, market_id, status):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        if market_id in self.active_markets:
            market_info = self.active_markets[market_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
            self.db_manager.update_market_analysis(market_id, {'status': status})
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            market_data = {
                'question': market_info['question'],
                'slug': market_info['slug'],
                'status': status
            }
            self.telegram_logger.log_market_stopped(market_data)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤
            del self.active_markets[market_id]
            logger.info(f"Stopped analysis for market {market_info['slug']}")
    
    def update_active_markets(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
        try:
            active_markets = self.db_manager.get_active_markets()
            
            for market in active_markets:
                if market['id'] in self.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                    start_time = self.active_markets[market['id']]['start_time']
                    if datetime.now(timezone.utc) - start_time > timedelta(minutes=ANALYSIS_TIME_MINUTES):
                        self.stop_market_analysis(market['id'], "–∑–∞–∫—Ä—ã—Ç")
        
        except Exception as e:
            error_msg = f"Error updating active markets: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)
    
    def log_market_summaries(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä—ã–Ω–∫–∞–º –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        try:
            active_markets = self.db_manager.get_active_markets()
            
            for market in active_markets:
                if market['id'] in self.active_markets:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    last_log = self.active_markets[market['id']]['last_log']
                    if datetime.now(timezone.utc) - last_log > timedelta(minutes=LOGGING_INTERVAL_MINUTES):
                        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
                        self.telegram_logger.log_market_data(market)
                        self.active_markets[market['id']]['last_log'] = datetime.now(timezone.utc)
        
        except Exception as e:
            error_msg = f"Error logging market summaries: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)

    def close_expired_markets(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä—ã–Ω–∫–æ–≤, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.info("‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Ä—ã–Ω–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
            exceeded_markets = self.db_manager.get_markets_exceeded_analysis_time(ANALYSIS_TIME_MINUTES)
            
            if exceeded_markets:
                logger.info(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ {len(exceeded_markets)} —Ä—ã–Ω–∫–æ–≤, –ø—Ä–µ–≤—ã—Å–∏–≤—à–∏—Ö –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞")
                for market in exceeded_markets:
                    market_id = market['id']
                    slug = market['slug']
                    logger.info(f"‚è∞ –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ä—ã–Ω–æ–∫: {slug}")
                    self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)'})
            else:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö —Ä—ã–Ω–∫–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
                
        except Exception as e:
            logger.error(f"Error closing expired markets: {e}")

    def restore_in_progress_markets(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä—ã–Ω–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        try:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ —Ä–∞–±–æ—Ç–µ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ —Ä–∞–±–æ—Ç–µ"
            in_progress_markets = self.db_manager.get_markets_in_progress()
            
            if not in_progress_markets:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç —Ä—ã–Ω–∫–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(in_progress_markets)} —Ä—ã–Ω–∫–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ")
            
            current_time = datetime.now(timezone.utc)
            logger.info(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
            logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ (–º–∏–Ω—É—Ç): {ANALYSIS_TIME_MINUTES}")
            
            for market in in_progress_markets:
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ª–æ–≤–∞—Ä—é
                    market_id = market['id']
                    slug = market['slug']
                    created_at_analytic = market['created_at_analytic']
                    last_updated = market['last_updated']
                    
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫: {slug} (ID: {market_id})")
                    logger.info(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_analytic}")
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
                    analysis_end_time_from_created = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_created = (analysis_end_time_from_created - current_time).total_seconds() / 60
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    analysis_end_time_from_updated = last_updated + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_updated = (analysis_end_time_from_updated - current_time).total_seconds() / 60
                    
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {analysis_end_time_from_created}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {analysis_end_time_from_updated}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {remaining_time_from_updated:.1f} –º–∏–Ω—É—Ç")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    if current_time >= analysis_end_time_from_created:
                        logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è —Ä—ã–Ω–∫–∞ {slug} (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è) - –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                        self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)'})
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                    if market_id in self.active_markets:
                        logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {slug} —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–∫—Ä—ã—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
                    closed_slugs = self.db_manager.get_closed_markets_slugs()
                    if slug in closed_slugs:
                        logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {slug} —É–∂–µ –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞ (Sports/Crypto)
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞: {slug}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    analysis_data = self.market_analyzer.get_market_data(slug)
                    
                    if analysis_data:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä—ã–Ω–æ–∫ –±—É–ª–µ–≤—ã–º
                        if not analysis_data.get('is_boolean', True):
                            reason = analysis_data.get('reason', 'non_boolean')
                            if reason.startswith('category_'):
                                category = reason.replace('category_', '')
                                logger.info(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫ {slug} –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.upper()} - –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                                self.db_manager.update_market_analysis(market_id, {'status': f'–∑–∞–∫—Ä—ã—Ç ({category})'})
                            else:
                                logger.info(f"‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä—ã–Ω–æ–∫ {slug} –Ω–µ –±—É–ª–µ–≤—ã–π - –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                                self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç (–Ω–µ –±—É–ª–µ–≤—ã–π)'})
                            continue
                        
                        # –†—ã–Ω–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ä—ã–Ω–∫–∞ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                        self.active_markets[market_id] = {
                            'start_time': created_at_analytic,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                            'last_log': current_time,
                            'slug': slug,
                            'question': market.get('question', '')
                        }
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        analysis_thread = threading.Thread(
                            target=self.analyze_market_continuously,
                            args=(market_id, slug)
                        )
                        analysis_thread.daemon = True
                        analysis_thread.start()
                        
                        logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ä—ã–Ω–∫–∞: {slug}")
                        
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}")
                        continue
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ {market.get('slug', 'unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(self.active_markets)}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–æ–≤: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)

    def check_recently_closed_markets(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ä—ã–Ω–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤
            recently_closed = self.db_manager.get_recently_closed_markets(10)
            
            if not recently_closed:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(recently_closed)} –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤")
            
            current_time = datetime.now(timezone.utc)
            
            for market in recently_closed:
                try:
                    market_id = market['id']
                    slug = market['slug']
                    status = market['status']
                    created_at_analytic = market['created_at_analytic']
                    last_updated = market['last_updated']
                    
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫: {slug} (ID: {market_id})")
                    logger.info(f"üìÖ –°—Ç–∞—Ç—É—Å: {status}")
                    logger.info(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_analytic}")
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è
                    analysis_end_time_from_created = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_created = (analysis_end_time_from_created - current_time).total_seconds() / 60
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    analysis_end_time_from_updated = last_updated + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_updated = (analysis_end_time_from_updated - current_time).total_seconds() / 60
                    
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {analysis_end_time_from_created}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {analysis_end_time_from_updated}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {remaining_time_from_updated:.1f} –º–∏–Ω—É—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ
                    if current_time < analysis_end_time_from_created:
                        logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –±—ã–ª –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç! –í—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞: {slug}")
                        
                        analysis_data = self.market_analyzer.get_market_data(slug)
                        
                        if analysis_data:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä—ã–Ω–æ–∫ –±—É–ª–µ–≤—ã–º
                            if not analysis_data.get('is_boolean', True):
                                reason = analysis_data.get('reason', 'non_boolean')
                                if reason.startswith('category_'):
                                    category = reason.replace('category_', '')
                                    logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.upper()} - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                                else:
                                    logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –±—É–ª–µ–≤—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                            else:
                                # –†—ã–Ω–æ–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ {slug}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                                current_time = datetime.now(timezone.utc)
                                analysis_end_time = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                                remaining_time = (analysis_end_time - current_time).total_seconds() / 60
                                
                                if remaining_time <= 0:
                                    logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}")
                                    self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)'})
                                else:
                                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {remaining_time:.1f} –º–∏–Ω—É—Ç")
                                    
                                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ —Ä–∞–±–æ—Ç–µ"
                                    self.db_manager.update_market_analysis(market_id, {'status': '–≤ —Ä–∞–±–æ—Ç–µ'})
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                                    self.active_markets[market_id] = {
                                        'start_time': created_at_analytic,
                                        'last_log': current_time,
                                        'slug': slug,
                                        'question': market.get('question', '')
                                    }
                                    
                                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                    analysis_thread = threading.Thread(
                                        target=self.analyze_market_continuously_restored,
                                        args=(market_id, slug)
                                    )
                                    analysis_thread.daemon = True
                                    analysis_thread.start()
                                    
                                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫: {slug}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}")
                    else:
                        logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {slug} –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞ {market.get('slug', 'unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(self.active_markets)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")
            self.telegram_logger.log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤: {e}")

    def verify_last_3_markets_timing(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Ä—ã–Ω–∫–æ–≤"""
        try:
            logger.info("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Ä—ã–Ω–∫–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä—ã–Ω–∫–∞
            last_3_markets = self.db_manager.get_last_3_markets_for_verification()
            
            if not last_3_markets:
                logger.info("‚ÑπÔ∏è –ù–µ—Ç —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(last_3_markets)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            current_time = datetime.now(timezone.utc)
            
            for i, market in enumerate(last_3_markets, 1):
                try:
                    market_id = market['id']
                    slug = market['slug']
                    status = market['status']
                    created_at_analytic = market['created_at_analytic']
                    last_updated = market['last_updated']
                    
                    logger.info(f"üîç –†—ã–Ω–æ–∫ #{i}: {slug} (ID: {market_id})")
                    logger.info(f"üìÖ –°—Ç–∞—Ç—É—Å: {status}")
                    logger.info(f"üìÖ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at_analytic}")
                    logger.info(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_updated}")
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                    analysis_end_time_from_created = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_created = (analysis_end_time_from_created - current_time).total_seconds() / 60
                    
                    analysis_end_time_from_updated = last_updated + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                    remaining_time_from_updated = (analysis_end_time_from_updated - current_time).total_seconds() / 60
                    
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {analysis_end_time_from_created}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è): {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {analysis_end_time_from_updated}")
                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): {remaining_time_from_updated:.1f} –º–∏–Ω—É—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä—ã–Ω–æ–∫ –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç
                    if status.startswith('–∑–∞–∫—Ä—ã—Ç') and current_time < analysis_end_time_from_created:
                        logger.warning(f"‚ö†Ô∏è –†–´–ù–û–ö #{i} –ë–´–õ –û–®–ò–ë–û–ß–ù–û –ó–ê–ö–†–´–¢!")
                        logger.warning(f"‚ö†Ô∏è {slug} - –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ, –æ—Å—Ç–∞–ª–æ—Å—å {remaining_time_from_created:.1f} –º–∏–Ω—É—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –±—É–ª–µ–≤–æ—Å—Ç—å
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞: {slug}")
                        
                        analysis_data = self.market_analyzer.get_market_data(slug)
                        
                        if analysis_data:
                            if not analysis_data.get('is_boolean', True):
                                reason = analysis_data.get('reason', 'non_boolean')
                                if reason.startswith('category_'):
                                    category = reason.replace('category_', '')
                                    logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.upper()} - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                                else:
                                    logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –±—É–ª–µ–≤—ã–π - –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–º")
                            else:
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫
                                logger.info(f"‚úÖ –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –û–®–ò–ë–û–ß–ù–û –ó–ê–ö–†–´–¢–´–ô –†–´–ù–û–ö #{i}: {slug}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
                                current_time = datetime.now(timezone.utc)
                                analysis_end_time = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
                                remaining_time = (analysis_end_time - current_time).total_seconds() / 60
                                
                                if remaining_time <= 0:
                                    logger.warning(f"‚ö†Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}")
                                    self.db_manager.update_market_analysis(market_id, {'status': '–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)'})
                                else:
                                    logger.info(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {remaining_time:.1f} –º–∏–Ω—É—Ç")
                                    
                                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≤ —Ä–∞–±–æ—Ç–µ"
                                    self.db_manager.update_market_analysis(market_id, {'status': '–≤ —Ä–∞–±–æ—Ç–µ'})
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                                    self.active_markets[market_id] = {
                                        'start_time': created_at_analytic,
                                        'last_log': current_time,
                                        'slug': slug,
                                        'question': market.get('question', '')
                                    }
                                    
                                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                                    analysis_thread = threading.Thread(
                                        target=self.analyze_market_continuously_restored,
                                        args=(market_id, slug)
                                    )
                                    analysis_thread.daemon = True
                                    analysis_thread.start()
                                    
                                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ #{i}: {slug}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—à–∏–±–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Ä—ã–Ω–∫–∞ {slug}")
                    elif status.startswith('–∑–∞–∫—Ä—ã—Ç'):
                        logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ #{i} {slug} –±—ã–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç - –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ")
                    else:
                        logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ #{i} {slug} –≤ —Å—Ç–∞—Ç—É—Å–µ: {status}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–∞ #{i} {market.get('slug', 'unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤: {len(self.active_markets)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–æ–≤: {e}")
            self.telegram_logger.log_error(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä—ã–Ω–∫–æ–≤: {e}")
    
    def analyze_market_continuously_restored(self, market_id, slug):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        market_data = self.db_manager.get_market_by_id(market_id)
        if not market_data:
            logger.error(f"Cannot find market data for ID {market_id}")
            return
        
        created_at_analytic = market_data['created_at_analytic']
        end_time = created_at_analytic + timedelta(minutes=ANALYSIS_TIME_MINUTES)
        retry_count = 0
        
        logger.info(f"Starting continuous analysis for RESTORED market {slug} until {end_time}")
        
        while datetime.now(timezone.utc) < end_time and self.running:
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                analysis_data = self.market_analyzer.get_market_data(slug)
                
                if analysis_data:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã
                    db_data = {
                        'market_exists': analysis_data.get('market_exists', False),
                        'is_boolean': analysis_data.get('is_boolean', False),
                        'yes_percentage': analysis_data.get('yes_percentage', 0),
                        'volume': analysis_data.get('volume', 'New'),
                        'contract_address': analysis_data.get('contract_address', ''),
                        'status': '–≤ —Ä–∞–±–æ—Ç–µ'
                    }
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                    success = self.db_manager.update_market_analysis(market_id, db_data)
                    if success:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {slug}: %Yes={db_data['yes_percentage']}%, Volume={db_data['volume']}, Contract={db_data['contract_address'][:10]}...")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
                    retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    retry_count += 1
                    if retry_count >= MAX_RETRIES:
                        logger.error(f"Max retries reached for RESTORED market {slug}, stopping analysis")
                        self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                        break
                    else:
                        logger.warning(f"Analysis failed for RESTORED market {slug}, retry {retry_count}/{MAX_RETRIES}")
                        time.sleep(RETRY_DELAY_SECONDS)
                        continue
                
                # –ñ–¥–µ–º PING_INTERVAL_MINUTES –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
                time.sleep(PING_INTERVAL_MINUTES * 60)
                
            except Exception as e:
                retry_count += 1
                error_msg = f"Error analyzing RESTORED market {slug}: {e}"
                logger.error(error_msg)
                self.telegram_logger.log_error(error_msg, slug)
                
                if retry_count >= MAX_RETRIES:
                    logger.error(f"Max retries reached for RESTORED market {slug}, stopping analysis")
                    self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")
                    break
                else:
                    time.sleep(RETRY_DELAY_SECONDS)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫–ª–æ
        if datetime.now(timezone.utc) >= end_time:
            logger.info(f"Analysis time expired for RESTORED market {slug}")
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç (–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ)")
        elif market_id in self.active_markets:
            logger.info(f"Stopping analysis for RESTORED market {slug} due to bot shutdown")
            self.stop_market_analysis(market_id, "–∑–∞–∫—Ä—ã—Ç")

    def add_market_by_slug(self, slug):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É –ø–æ —Å–ª–∞–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ —Å–ª–∞–≥: {slug}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫
            existing_market = self.db_manager.get_market_by_slug(slug)
            if existing_market:
                logger.warning(f"–†—ã–Ω–æ–∫ {slug} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–µ")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ MarketAnalyzer
            analysis_data = self.market_analyzer.get_market_data(slug)
            
            if not analysis_data:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä—ã–Ω–∫–∞ {slug}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞
            market_data = {
                'id': None,  # –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                'question': f"Market: {slug}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                'created_at': datetime.now(timezone.utc),
                'active': True,
                'enable_order_book': True,
                'slug': slug,
                'market_exists': analysis_data.get('market_exists', True),
                'is_boolean': analysis_data.get('is_boolean', True),
                'yes_percentage': analysis_data.get('yes_percentage', 0),
                'volume': analysis_data.get('volume', 'New'),
                'contract_address': analysis_data.get('contract_address', ''),
                'status': '–≤ —Ä–∞–±–æ—Ç–µ'
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É
            analytic_market_id = self.db_manager.insert_market_to_analytic(market_data)
            
            if analytic_market_id:
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {slug} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É (ID: {analytic_market_id})")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä—ã–Ω–∫–∏
                self.active_markets[analytic_market_id] = {
                    'start_time': datetime.now(timezone.utc),
                    'last_log': datetime.now(timezone.utc),
                    'slug': slug,
                    'question': market_data['question']
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫
                self.telegram_logger.log_new_market({
                    'slug': slug,
                    'question': market_data['question']
                })
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                analysis_thread = threading.Thread(
                    target=self.analyze_market_continuously,
                    args=(analytic_market_id, slug)
                )
                analysis_thread.daemon = True
                analysis_thread.start()
                
                logger.info(f"üöÄ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {slug} –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–Ω–æ–∫ {slug} –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É")
                return False
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ {slug}: {e}"
            logger.error(error_msg)
            self.telegram_logger.log_error(error_msg)
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = MarketAnalysisBot()
    try:
        bot.start()
    except Exception as e:
        logger.error(f"Fatal error in main: {e}")
        bot.stop()

if __name__ == "__main__":
    main() 