#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ
"""

import asyncio
import logging
import re
import time
from datetime import datetime
from playwright.sync_api import sync_playwright

logger = logging.getLogger(__name__)

class SyncMarketAnalyzer:
    def __init__(self):
        self.browser = None
        self.page = None
        self.playwright = None
    
    def init_browser(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...")
            self.playwright = sync_playwright().start()
            self.browser = self.playwright.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu'
                ]
            )
            self.page = self.browser.new_page()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user agent
            self.page.set_extra_http_headers({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            })
            
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def goto_page(self, url):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        try:
            logger.info(f"üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            logger.info(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            self.page.goto(url, wait_until='domcontentloaded', timeout=60000)
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {url}")
            
            # –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            logger.info("‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            time.sleep(3)
            logger.info("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {url}: {e}")
            raise
    
    def extract_text_from_screenshot(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        try:
            import pytesseract
            from PIL import Image
            import io
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            screenshot = self.page.screenshot(full_page=True)
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
            image = Image.open(io.BytesIO(screenshot))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR...")
            text = pytesseract.image_to_string(image, lang='eng')
            logger.info(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")
            return text.strip()
            
        except ImportError:
            logger.warning("pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self.page.text_content()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return self.page.text_content()
    
    def extract_market_data(self, page_text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ RegEx"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞...")
            data = {
                'market_exists': True,
                'is_boolean': True,
                'yes_percentage': 0,
                'volume': 'New',
                'contract_address': '',
                'status': '–≤ —Ä–∞–±–æ—Ç–µ',
                'market_name': 'Unknown Market'
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞
            title_patterns = [
                r'Will any presidential candidate[^.!?]*[.!?]',
                r'Will [^.!?]*[.!?]',
                r'[A-Z][^.!?]*[.!?]',
                r'[A-Z][a-z\s]+[?]'
            ]
            
            for pattern in title_patterns:
                match = re.search(pattern, page_text, re.IGNORECASE)
                if match:
                    title = match.group(0).strip()
                    if len(title) > 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        data['market_name'] = title
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞: {title}")
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–ª–µ–≤–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ RegEx
            boolean_indicators = [
                r'yes\s*\d+[¬¢%]',  # Yes 21¬¢
                r'no\s*\d+[¬¢%]',   # No 81¬¢
                r'yes\s*\$\d+',    # Yes $0.21
                r'no\s*\$\d+',     # No $0.81
                r'yes\s*\d+%',     # Yes 21%
                r'no\s*\d+%',      # No 79%
                r'\d+%',           # 38% (–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç)
                r'\d+¬¢',           # 50¬¢ (–ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω—Ç—ã)
                r'\$\d+',          # $0.50 (–ø—Ä–æ—Å—Ç–æ –¥–æ–ª–ª–∞—Ä—ã)
            ]
            
            is_boolean_market = False
            for pattern in boolean_indicators:
                if re.search(pattern, page_text, re.IGNORECASE):
                    is_boolean_market = True
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –±—É–ª–µ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {pattern}")
                    break
            
            if not is_boolean_market:
                logger.warning("‚ö†Ô∏è –†—ã–Ω–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                data['is_boolean'] = False
                data['status'] = 'closed'
                return data
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç Yes —á–µ—Ä–µ–∑ RegEx
            yes_patterns = [
                r'(\d+(?:\.\d+)?)\s*%',  # 50%
                r'(\d+(?:\.\d+)?)\s*¬¢',   # 50¬¢
                r'(\d+(?:\.\d+)?)\s*chance',  # 50% chance
                r'yes\s*(\d+(?:\.\d+)?)\s*%',  # Yes 50%
                r'(\d+(?:\.\d+)?)\s*%\s*yes',  # 50% Yes
            ]
            
            yes_percentage = 0
            for pattern in yes_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    try:
                        value = float(matches[0])
                        if 0 <= value <= 100:
                            yes_percentage = value
                            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç Yes: {yes_percentage}%")
                            break
                    except ValueError:
                        continue
            
            data['yes_percentage'] = yes_percentage
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º —á–µ—Ä–µ–∑ RegEx
            volume_patterns = [
                r'\$(\d+(?:,\d{3})*(?:\.\d+)?)\s*Vol',  # $8,937 Vol
                r'(\d+(?:,\d{3})*(?:\.\d+)?)\s*Vol',    # 8,937 Vol
                r'Volume:\s*\$(\d+(?:,\d{3})*(?:\.\d+)?)',
                r'(\d+(?:,\d{3})*(?:\.\d+)?)\s*USD',
                r'\$(\d+(?:,\d{3})*(?:\.\d+)?)',        # $8,937
                r'Total Volume:\s*\$(\d+(?:,\d{3})*(?:\.\d+)?)',
                r'Volume\s*\$(\d+(?:,\d{3})*(?:\.\d+)?)',
                r'(\d+(?:,\d{3})*(?:\.\d+)?)\s*volume',
                r'(\d+(?:,\d{3})*(?:\.\d+)?)\s*total',
                r'Vol\s*\$(\d+(?:,\d{3})*(?:\.\d+)?)',  # Vol $8,937
                r'Vol\s*(\d+(?:,\d{3})*(?:\.\d+)?)'     # Vol 8,937
            ]
            
            for pattern in volume_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    volume = matches[0].replace(',', '')
                    try:
                        volume_float = float(volume)
                        if volume_float > 0:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º —Å –∑–∞–ø—è—Ç—ã–º–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
                            if volume_float >= 1000:
                                formatted_volume = f"${volume_float:,.0f}"
                            else:
                                formatted_volume = f"${volume}"
                            data['volume'] = formatted_volume
                            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –æ–±—ä–µ–º: {data['volume']}")
                            break
                    except ValueError:
                        continue
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ RegEx
            contract_patterns = [
                r'0x[a-fA-F0-9]{40}',  # Ethereum –∞–¥—Ä–µ—Å
                r'Contract:\s*(0x[a-fA-F0-9]{40})',
                r'contract\s*(0x[a-fA-F0-9]{40})',
                r'address\s*(0x[a-fA-F0-9]{40})',
                r'(0x[a-fA-F0-9]{40})\s*contract',
                r'(0x[a-fA-F0-9]{40})\s*address'
            ]
            
            for pattern in contract_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    contract = matches[0]
                    if len(contract) == 42 and contract.startswith('0x'):
                        data['contract_address'] = contract
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract}")
                        break
            
            logger.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
            return None
    
    def analyze_market(self, slug):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: {slug}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
            if not self.init_browser():
                return None
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            url = f"https://polymarket.com/event/{slug}"
            self.goto_page(url)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            page_text = self.extract_text_from_screenshot()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            market_data = self.extract_market_data(page_text)
            
            if market_data:
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ {slug} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return market_data
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
                return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ {slug}: {e}")
            return None
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            self.close_browser()
    
    def close_browser(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.browser:
                self.browser.close()
            if self.playwright:
                self.playwright.stop()
            logger.info("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}") 