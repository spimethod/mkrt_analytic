import logging
import re
import asyncio
from analysis.yes_percentage_extractor import YesPercentageExtractor
from analysis.volume_extractor import VolumeExtractor
from analysis.contract_extractor import ContractExtractor
from analysis.market_name_extractor import MarketNameExtractor

logger = logging.getLogger(__name__)

class DataExtractor:
    def __init__(self):
        self.yes_extractor = YesPercentageExtractor()
        self.volume_extractor = VolumeExtractor()
        self.contract_extractor = ContractExtractor()
        self.name_extractor = MarketNameExtractor()
    
    async def extract_text_from_screenshot(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é pytesseract"""
        try:
            import pytesseract
            from PIL import Image
            import io
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            logger.info("üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            screenshot = await page.screenshot(full_page=True)
            logger.info("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–¥–µ–ª–∞–Ω")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
            image = Image.open(io.BytesIO(screenshot))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            logger.info("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR...")
            text = pytesseract.image_to_string(image, lang='eng')
            logger.info(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text[:200]}...")
            return text.strip()
            
        except ImportError:
            logger.warning("pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return await page.text_content()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return await page.text_content()
    
    async def extract_market_data(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OCR + RegEx"""
        try:
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞...")
            data = {
                'market_exists': True,
                'is_boolean': True,
                'yes_percentage': 0,
                'volume': 'New',
                'contract_address': '',
                'status': '–≤ —Ä–∞–±–æ—Ç–µ',
                'market_name': 'Unknown Market'
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OCR
            page_text = await self.extract_text_from_screenshot(page)
            logger.info(f"üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_text[:300]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
            if "Failed to verify your browser" in page_text or "Security Checkpoint" in page_text:
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º (Security Checkpoint) - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ")
                # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –±—Ä–∞—É–∑–µ—Ä–æ–º, —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                data['status'] = '–≤ —Ä–∞–±–æ—Ç–µ'  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä—ã–Ω–æ–∫ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
                return None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞
            market_name = await self.name_extractor.extract_market_name(page)
            if market_name:
                data['market_name'] = market_name
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞: {market_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–ª–µ–≤–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ RegEx
            boolean_indicators = [
                r'yes\s*\d+[¬¢%]',  # Yes 21¬¢
                r'no\s*\d+[¬¢%]',   # No 81¬¢
                r'yes\s*\$\d+',    # Yes $0.21
                r'no\s*\$\d+',     # No $0.81
                r'yes\s*\d+%',     # Yes 21%
                r'no\s*\d+%',      # No 79%
                r'\d+%',           # 38% (–ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç)
                r'\d+¬¢',           # 50¬¢ (–ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω—Ç—ã)
                r'\$\d+',          # $0.50 (–ø—Ä–æ—Å—Ç–æ –¥–æ–ª–ª–∞—Ä—ã)
            ]
            
            is_boolean_market = False
            for pattern in boolean_indicators:
                if re.search(pattern, page_text, re.IGNORECASE):
                    is_boolean_market = True
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –±—É–ª–µ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {pattern}")
                    break
            
            if not is_boolean_market:
                logger.warning("‚ö†Ô∏è –†—ã–Ω–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                data['is_boolean'] = False
                data['status'] = 'closed'
                return data
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç Yes —á–µ—Ä–µ–∑ RegEx
            yes_patterns = [
                r'(\d+(?:\.\d+)?)\s*%',  # 50%
                r'(\d+(?:\.\d+)?)\s*¬¢',   # 50¬¢
                r'(\d+(?:\.\d+)?)\s*chance',  # 50% chance
                r'yes\s*(\d+(?:\.\d+)?)\s*%',  # Yes 50%
                r'(\d+(?:\.\d+)?)\s*%\s*yes',  # 50% Yes
            ]
            
            yes_percentage = 0
            for pattern in yes_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    try:
                        value = float(matches[0])
                        if 0 <= value <= 100:
                            yes_percentage = value
                            logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç Yes: {yes_percentage}%")
                            break
                    except ValueError:
                        continue
            
            data['yes_percentage'] = yes_percentage
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π VolumeExtractor
            volume = await self.volume_extractor.extract_volume(page)
            if volume:
                data['volume'] = volume
                logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –æ–±—ä–µ–º: {volume}")
            else:
                logger.warning("‚ö†Ô∏è –û–±—ä–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ RegEx
            contract_patterns = [
                r'0x[a-fA-F0-9]{40}',  # Ethereum –∞–¥—Ä–µ—Å
                r'Contract:\s*(0x[a-fA-F0-9]{40})',
            ]
            
            for pattern in contract_patterns:
                matches = re.findall(pattern, page_text, re.IGNORECASE)
                if matches:
                    contract = matches[0]
                    if len(contract) == 42 and contract.startswith('0x'):
                        data['contract_address'] = contract
                        logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {contract}")
                        break
            
            logger.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
            return None 