import psycopg2
import psycopg2.extras
from datetime import datetime, timedelta, timezone
from config import POLYMARKET_DB_CONFIG, ANALYTIC_DB_CONFIG
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging_config

def convert_naive_to_aware(dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç naive datetime –≤ timezone-aware UTC datetime"""
    if dt is None:
        return None
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt

logger = logging.getLogger(__name__)

class DatabaseManager:
    def __init__(self):
        self.conn = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
            self.conn = psycopg2.connect(**POLYMARKET_DB_CONFIG)
            logger.info("Connected to database")
            return True
        except Exception as e:
            logger.error(f"Failed to connect to database: {e}")
            return False
    
    def get_new_markets(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã markets"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, question, created_at, active, enable_order_book, slug
                FROM markets
                ORDER BY created_at DESC
                LIMIT 10
            """)
            
            markets = cursor.fetchall()
            cursor.close()
            return markets
        except Exception as e:
            logger.error(f"Error getting new markets: {e}")
            return []

    def get_new_markets_after_time(self, start_time):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, question, created_at, active, enable_order_book, slug
                FROM markets
                WHERE created_at > %s
                ORDER BY created_at DESC
                LIMIT 10
            """, (start_time,))
            
            markets = cursor.fetchall()
            cursor.close()
            return markets
        except Exception as e:
            logger.error(f"Error getting new markets after time: {e}")
            return []
    
    def market_exists_in_analytic(self, slug):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ slug"""
        try:
            if not self.conn:
                if not self.connect():
                    return False
            
            cursor = self.conn.cursor()
            cursor.execute("SELECT id FROM mkrt_analytic WHERE slug = %s", (slug,))
            result = cursor.fetchone()
            cursor.close()
            
            return result is not None
        except Exception as e:
            logger.error(f"Error checking market existence: {e}")
            return False

    def insert_market_to_analytic(self, market_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É mkrt_analytic"""
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä—ã–Ω–∫–∞: {market_data.get('slug', 'unknown')}")
            
            if not self.conn:
                logger.info("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
                if not self.connect():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä—ã–Ω–æ–∫ —Å —Ç–∞–∫–∏–º slug
            if self.market_exists_in_analytic(market_data['slug']):
                logger.info(f"‚ÑπÔ∏è –†—ã–Ω–æ–∫ {market_data['slug']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ë–î")
                # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä—ã–Ω–∫–∞
                cursor = self.conn.cursor()
                cursor.execute("SELECT id FROM mkrt_analytic WHERE slug = %s", (market_data['slug'],))
                result = cursor.fetchone()
                cursor.close()
                return result[0] if result else None
            
            logger.info(f"üìù –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä—ã–Ω–æ–∫: {market_data['slug']}")
            
            cursor = self.conn.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            current_time = datetime.now(timezone.utc)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            insert_data = (
                market_data['id'],
                market_data['question'],
                market_data['created_at'],
                market_data['active'],
                market_data['enable_order_book'],
                market_data['slug'],
                market_data.get('market_exists', True),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                market_data.get('is_boolean', True),     # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                market_data.get('yes_percentage', 0),
                market_data.get('volume', 'New'),        # Volume –∏–ª–∏ "New"
                market_data.get('contract_address', ''),
                market_data.get('status', '–≤ —Ä–∞–±–æ—Ç–µ'),
                current_time,  # last_updated
                current_time   # created_at_analytic
            )
            
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {insert_data}")
            
            cursor.execute("""
                INSERT INTO mkrt_analytic 
                (polymarket_id, question, created_at, active, enable_order_book, slug, 
                 market_exists, is_boolean, yes_percentage, volume, contract_address, status, last_updated, created_at_analytic)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON CONFLICT (polymarket_id) DO UPDATE SET
                last_updated = EXCLUDED.last_updated
                RETURNING id
            """, insert_data)
            
            result = cursor.fetchone()
            if result:
                market_id = result[0]
                self.conn.commit()
                cursor.close()
                logger.info(f"‚úÖ –†—ã–Ω–æ–∫ {market_data['slug']} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω! ID: {market_id}")
                return market_id
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏")
                self.conn.rollback()
                cursor.close()
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ä—ã–Ω–∫–∞ –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –ë–î: {e}")
            if self.conn:
                self.conn.rollback()
            return None
    
    def update_market_analysis(self, market_id, analysis_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä—ã–Ω–∫–∞ ID: {market_id}")
            
            if not self.conn:
                logger.info("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î...")
                if not self.connect():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                    return False
            
            cursor = self.conn.cursor()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            current_time = datetime.now(timezone.utc)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            update_data = (
                analysis_data.get('market_exists', True),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                analysis_data.get('is_boolean', True),     # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                analysis_data.get('yes_percentage', 0),
                analysis_data.get('volume', 'New'),        # Volume –∏–ª–∏ "New"
                analysis_data.get('contract_address', ''),
                analysis_data.get('status', '–≤ —Ä–∞–±–æ—Ç–µ'),
                current_time,
                market_id
            )
            
            logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
            
            cursor.execute("""
                UPDATE mkrt_analytic 
                SET market_exists = %s, is_boolean = %s, yes_percentage = %s,
                    volume = %s, contract_address = %s, status = %s, last_updated = %s
                WHERE id = %s
            """, update_data)
            
            rows_affected = cursor.rowcount
            self.conn.commit()
            cursor.close()
            
            if rows_affected > 0:
                logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ ID {market_id} –æ–±–Ω–æ–≤–ª–µ–Ω! –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (ID: {market_id})")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            if self.conn:
                self.conn.rollback()
            return False
    
    def get_market_by_slug(self, slug):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ slug –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not self.conn:
                if not self.connect():
                    return None
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT * FROM mkrt_analytic WHERE slug = %s
            """, (slug,))
            
            market = cursor.fetchone()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            if market:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            return market
        except Exception as e:
            logger.error(f"Error getting market by slug: {e}")
            return None
    
    def get_active_markets(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT * FROM mkrt_analytic WHERE status = '–≤ —Ä–∞–±–æ—Ç–µ'
            """)
            
            markets = cursor.fetchall()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            for market in markets:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            return markets
        except Exception as e:
            logger.error(f"Error getting active markets: {e}")
            return []
    
    def get_markets_exceeded_analysis_time(self, analysis_time_minutes):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤ –∏–∑ mkrt_analytic, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä—ã–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã (–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è)
            cutoff_time = datetime.now(timezone.utc) - timedelta(minutes=analysis_time_minutes)
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, slug, created_at_analytic, status
                FROM mkrt_analytic
                WHERE created_at_analytic < %s AND status = '–≤ —Ä–∞–±–æ—Ç–µ'
            """, (cutoff_time,))
            
            markets = cursor.fetchall()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            for market in markets:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            logger.info(f"Found {len(markets)} markets that exceeded analysis time ({analysis_time_minutes} minutes)")
            return markets
        except Exception as e:
            logger.error(f"Error getting markets exceeded analysis time: {e}")
            return []

    def get_markets_in_progress(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ (—Å—Ç–∞—Ç—É—Å '–≤ —Ä–∞–±–æ—Ç–µ')"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, slug, status, last_updated, created_at_analytic, question
                FROM mkrt_analytic
                WHERE status = '–≤ —Ä–∞–±–æ—Ç–µ'
            """)
            
            markets = cursor.fetchall()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            for market in markets:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            return markets
        except Exception as e:
            logger.error(f"Error getting markets in progress: {e}")
            return []

    def get_closed_markets_slugs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ slug'–æ–≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT slug
                FROM mkrt_analytic
                WHERE status LIKE '–∑–∞–∫—Ä—ã—Ç%'
            """)
            
            markets = cursor.fetchall()
            cursor.close()
            return [market['slug'] for market in markets]
        except Exception as e:
            logger.error(f"Error getting closed markets slugs: {e}")
            return []
    
    def get_recently_closed_markets(self, limit=10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ—à–∏–±–æ—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, slug, status, last_updated, created_at_analytic, question
                FROM mkrt_analytic
                WHERE status LIKE '–∑–∞–∫—Ä—ã—Ç%%'
                ORDER BY last_updated DESC
                LIMIT %s
            """, (limit,))
            
            markets = cursor.fetchall()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            for market in markets:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            logger.info(f"Retrieved {len(markets)} recently closed markets")
            return markets
        except Exception as e:
            logger.error(f"Error getting recently closed markets: {e}")
            return []
    
    def get_last_3_markets_for_verification(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3 —Ä—ã–Ω–∫–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not self.conn:
                if not self.connect():
                    return []
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT id, slug, status, last_updated, created_at_analytic, question
                FROM mkrt_analytic
                ORDER BY last_updated DESC
                LIMIT 3
            """)
            
            markets = cursor.fetchall()
            cursor.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º naive datetime –≤ timezone-aware
            for market in markets:
                if 'created_at_analytic' in market:
                    market['created_at_analytic'] = convert_naive_to_aware(market['created_at_analytic'])
                if 'last_updated' in market:
                    market['last_updated'] = convert_naive_to_aware(market['last_updated'])
            
            logger.info(f"Retrieved {len(markets)} last markets for verification")
            return markets
        except Exception as e:
            logger.error(f"Error getting last 3 markets: {e}")
            return []
    
    def get_market_by_id(self, market_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ ID –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not self.conn:
                if not self.connect():
                    return None
            
            cursor = self.conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)
            cursor.execute("""
                SELECT * FROM mkrt_analytic WHERE id = %s
            """, (market_id,))
            
            market = cursor.fetchone()
            cursor.close()
            return market
        except Exception as e:
            logger.error(f"Error getting market by ID: {e}")
            return None
    
    def close_connections(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if self.conn:
            self.conn.close()
        logger.info("Database connection closed") 