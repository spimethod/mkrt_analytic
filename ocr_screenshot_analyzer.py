#!/usr/bin/env python3
"""
OCR –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: Playwright + pytesseract + RegEx
"""

import asyncio
import json
import logging
import re
from datetime import datetime
from playwright.async_api import async_playwright
from config import POLYMARKET_BASE_URL

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging_config

logger = logging.getLogger(__name__)

class OCRScreenshotAnalyzer:
    def __init__(self):
        self.browser = None
        self.page = None
        
    async def init_browser(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--disable-gpu'
                ]
            )
            self.page = await self.browser.new_page()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user agent
            await self.page.set_extra_http_headers({
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            })
            
            logger.info("–ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è OCR –∞–Ω–∞–ª–∏–∑–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False
    
    def get_fallback_data(self, slug):
        """Fallback –º–µ—Ç–æ–¥ –∫–æ–≥–¥–∞ Playwright –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
        return {
            'market_exists': True,
            'market_name': f"Market: {slug}",
            'is_boolean': True,
            'prices': {'Yes': '50.00%', 'No': '50.00%'},
            'contract_address': '0x0000000000000000000000000000000000000000',
            'total_volume': 'New',
            'analysis_time': datetime.now().isoformat(),
            'status': 'fallback'
        }
    
    async def close_browser(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        try:
            if self.browser:
                await self.browser.close()
            if hasattr(self, 'playwright'):
                await self.playwright.stop()
            logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    async def capture_and_extract_text(self, slug):
        """–ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            url = f"{POLYMARKET_BASE_URL}{slug}"
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            await self.page.goto(url, wait_until='domcontentloaded', timeout=60000)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await asyncio.sleep(3)
            
            extracted_data = {}
            
            # 1. –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            full_screenshot = await self.page.screenshot(full_page=True)
            full_text = await self.extract_text_from_image(full_screenshot)
            extracted_data['full_page_text'] = full_text
            
            # 2. –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            try:
                title_area = await self.page.query_selector('h1, [class*="title"], [class*="heading"]')
                if title_area:
                    title_screenshot = await title_area.screenshot()
                    title_text = await self.extract_text_from_image(title_screenshot)
                    extracted_data['title_text'] = title_text
            except:
                pass
            
            # 3. –°–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å —Ü–µ–Ω–∞–º–∏/–ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
            try:
                price_area = await self.page.query_selector('[class*="price"], [class*="odds"], [class*="probability"], [class*="percentage"]')
                if price_area:
                    price_screenshot = await price_area.screenshot()
                    price_text = await self.extract_text_from_image(price_screenshot)
                    extracted_data['price_text'] = price_text
            except:
                pass
            
            # 4. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–∫
            logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
            contract_address = await self.extract_contract_address()
            if contract_address:
                logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {contract_address}")
                # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ extracted_data –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                extracted_data['extracted_contract'] = contract_address
            else:
                logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
            
            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç –∏–∑ {len(extracted_data)} –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è {slug}")
            return extracted_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return {}
    
    async def extract_contract_address(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∏–∫ –Ω–∞ Show more"""
        try:
            # 1. –ò—â–µ–º –∫–Ω–æ–ø–∫—É "Show more"
            show_more_selectors = [
                'button:has-text("Show more")',
                'a:has-text("Show more")',
                '[class*="show-more"]',
                '[class*="expand"]',
                'button[aria-label*="more"]',
                'a[aria-label*="more"]'
            ]
            
            show_more_button = None
            for selector in show_more_selectors:
                try:
                    show_more_button = await self.page.query_selector(selector)
                    if show_more_button:
                        logger.info(f"‚úî –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Show more: {selector}")
                        break
                except:
                    continue
            
            if not show_more_button:
                logger.warning("‚ùå –ö–Ω–æ–ø–∫–∞ Show more –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return await self.extract_full_contract_from_page()
            
            # 2. –ö–ª–∏–∫–∞–µ–º –Ω–∞ Show more
            await show_more_button.click()
            logger.info("‚úî –ö–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ Show more")
            await asyncio.sleep(2)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
            # 3. –ò—â–µ–º —Å—Å—ã–ª–∫—É —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
            contract_link_selectors = [
                'a[href*="0x"]',
                '[class*="contract"] a',
                '[class*="address"] a',
                'a[href*="/event/"]',
                'a[href*="/market/"]'
            ]
            
            contract_link = None
            for selector in contract_link_selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä {selector}: –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    for element in elements:
                        href = await element.get_attribute('href')
                        if href and '0x' in href:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —á–∞—Å—Ç–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å
                            if len(href) > 20:  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
                                contract_link = element
                                logger.info(f"‚úî –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º: {href}")
                                break
                    
                    if contract_link:
                        break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {e}")
                    continue
            
            if not contract_link:
                logger.warning("‚ùå –°—Å—ã–ª–∫–∞ —Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return await self.extract_full_contract_from_page()
            
            # 4. –ü–æ–ª—É—á–∞–µ–º href —Å—Å—ã–ª–∫–∏
            href = await contract_link.get_attribute('href')
            if not href:
                logger.warning("‚ùå Href —Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–æ–π")
                return await self.extract_full_contract_from_page()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ href - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
            if not href.startswith('http'):
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
                current_url = self.page.url
                if href.startswith('/'):
                    href = f"https://polymarket.com{href}"
                else:
                    href = f"{current_url.rstrip('/')}/{href}"
            
            logger.info(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º URL: {href}")
            
            # 5. –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–ª–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                new_page = await self.browser.new_page()
                await new_page.set_extra_http_headers({
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                })
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
                await new_page.goto(href, wait_until='domcontentloaded', timeout=30000)
                await asyncio.sleep(2)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                full_contract = await self.extract_full_contract_from_page_new_page(new_page)
                
                if full_contract:
                    logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {full_contract}")
                    await new_page.close()
                    return full_contract
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –∏—â–µ–º –≤ URL
                    current_url = new_page.url
                    contract_match = re.search(r'0x[a-fA-F0-9]{40}', current_url)
                    if contract_match:
                        full_contract = contract_match.group()
                        logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ URL: {full_contract}")
                        await new_page.close()
                        return full_contract
                    
                    await new_page.close()
                    logger.warning("‚ùå –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    return await self.extract_full_contract_from_page()
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
                return await self.extract_full_contract_from_page()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: {e}")
            return None
    
    async def extract_full_contract_from_page(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            contract_selectors = [
                '[class*="contract"]',
                '[class*="address"]',
                '[class*="hex"]',
                'code',
                'pre',
                '[data-testid*="contract"]',
                '[class*="token"]'
            ]
            
            for selector in contract_selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        element_text = await element.text_content()
                        if element_text:
                            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (40 —Å–∏–º–≤–æ–ª–æ–≤)
                            contract_match = re.search(r'0x[a-fA-F0-9]{40}', element_text)
                            if contract_match:
                                return contract_match.group()
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_text = await self.page.text_content('body')
            contract_matches = re.findall(r'0x[a-fA-F0-9]{40}', page_text)
            if contract_matches:
                return contract_matches[0]
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å, –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ–≥–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
            partial_matches = re.findall(r'0x[a-fA-F0-9]{10,}', page_text)
            if partial_matches:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å: {partial_matches[0]}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                for match in partial_matches:
                    if len(match) >= 20:  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–Ω—ã–º
                        logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {match}")
                        return match
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
    
    async def extract_full_contract_from_page_new_page(self, page):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            contract_selectors = [
                '[class*="contract"]',
                '[class*="address"]',
                '[class*="hex"]',
                'code',
                'pre',
                '[data-testid*="contract"]',
                '[class*="token"]'
            ]
            
            for selector in contract_selectors:
                try:
                    elements = await page.query_selector_all(selector)
                    for element in elements:
                        element_text = await element.text_content()
                        if element_text:
                            # –ò—â–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (40 —Å–∏–º–≤–æ–ª–æ–≤)
                            contract_match = re.search(r'0x[a-fA-F0-9]{40}', element_text)
                            if contract_match:
                                return contract_match.group()
                except Exception as e:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã, –∏—â–µ–º –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page_text = await page.text_content('body')
            contract_matches = re.findall(r'0x[a-fA-F0-9]{40}', page_text)
            if contract_matches:
                return contract_matches[0]
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            return None
    
    async def extract_text_from_image(self, image_data):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é pytesseract"""
        try:
            import pytesseract
            from PIL import Image
            import io
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bytes –≤ PIL Image
            image = Image.open(io.BytesIO(image_data))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = pytesseract.image_to_string(image, lang='eng')
            
            return text.strip()
            
        except ImportError:
            logger.warning("pytesseract –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return ""
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    async def detect_market_category(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä—ã–Ω–∫–∞ (Sports/Crypto/Other) —á–µ—Ä–µ–∑ —Å–∫—Ä–∞–±–∏–Ω–≥"""
        try:
            # 1. –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ/–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–∞–±—ã (–∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω–µ)
            active_selectors = [
                '[class*="active"]',
                '[class*="selected"]',
                '[aria-selected="true"]',
                '[data-active="true"]',
                '[class*="current"]',
                '[class*="highlight"]'
            ]
            
            active_text = ""
            for selector in active_selectors:
                try:
                    elements = await self.page.query_selector_all(selector)
                    for element in elements:
                        text = await element.text_content()
                        if text and len(text.strip()) > 1:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                            filtered_text = text.strip().lower()
                            if not any(tech in filtered_text for tech in ['1h', '6h', '1d', '1w', '1m', 'all', 'comments', 'holders', 'activity', 'post', 'trade', 'max', 'gear', 'chevron', 'dots', 'arrows', 'circle', 'link', 'show less', 'show more', 'united states', 'how it works', 'log in', 'sign up']):
                                active_text += filtered_text + " "
                                logger.info(f"–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {text}")
                except Exception as e:
                    logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
                    continue
            
            # 2. –ò—â–µ–º –≤ URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            current_url = self.page.url.lower()
            page_title = await self.page.title()
            if page_title:
                page_title = page_title.lower()
            
            # 3. –ò—â–µ–º –≤ –ø–æ–ª–Ω–æ–º —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            full_text = await self.page.text_content('body')
            full_text = full_text.lower()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            all_text = f"{active_text} {current_url} {page_title} {full_text}"
            
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            sports_indicators = [
                'sports', 'mlb', 'nba', 'nfl', 'wnba', 'golf', 'epl', 'cfb',
                'baseball', 'basketball', 'football', 'soccer', 'tennis',
                'game', 'match', 'team', 'player', 'score'
            ]
            
            crypto_indicators = [
                'crypto', 'bitcoin', 'ethereum', 'btc', 'eth', 'blockchain',
                'token', 'coin', 'defi', 'nft', 'web3', 'mining',
                'cryptocurrency', 'digital currency'
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Sports —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            sports_score = 0
            for indicator in sports_indicators:
                if indicator in all_text:
                    sports_score += 1
                    logger.info(f"–ù–∞–π–¥–µ–Ω Sports –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Crypto —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            crypto_score = 0
            for indicator in crypto_indicators:
                if indicator in all_text:
                    crypto_score += 1
                    logger.info(f"–ù–∞–π–¥–µ–Ω Crypto –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
            
            logger.info(f"Sports score: {sports_score}, Crypto score: {crypto_score}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
            if sports_score >= 3:  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 3 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è Sports
                logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Sports (score: {sports_score})")
                return 'sports'
            elif crypto_score >= 2:  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è Crypto
                logger.info(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Crypto (score: {crypto_score})")
                return 'crypto'
            else:
                logger.info("‚úÖ –†—ã–Ω–æ–∫ –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ Sports/Crypto –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                return 'other'
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä—ã–Ω–∫–∞: {e}")
            return 'other'
    
    def parse_data_with_regex(self, extracted_data):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é RegEx"""
        try:
            parsed_data = {}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –æ–±–ª–∞—Å—Ç–µ–π
            full_text = extracted_data.get('full_page_text', '')
            title_text = extracted_data.get('title_text', '')
            price_text = extracted_data.get('price_text', '')
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_text = f"{full_text} {title_text} {price_text}".lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ-–±—É–ª–µ–≤—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            non_boolean_indicators = [
                'multiple choice', 'choose', 'select', 'option',
                'winner', 'winner takes all', 'multi-outcome',
                'prediction', 'forecast', 'outcome'
            ]
            
            is_boolean_market = True
            for indicator in non_boolean_indicators:
                if indicator in all_text:
                    is_boolean_market = False
                    logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –Ω–µ-–±—É–ª–µ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä: {indicator}")
                    break
            
            # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –Ω–µ –±—É–ª–µ–≤—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if not is_boolean_market:
                logger.warning("‚ö†Ô∏è –†—ã–Ω–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                return {
                    'market_exists': True,
                    'is_boolean': False,
                    'status': 'closed',
                    'reason': 'non_boolean_market'
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞ - –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∑–Ω–∞—á–∏—Ç —Ä—ã–Ω–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            market_exists = True
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞
            title_match = re.search(r'([A-Z][^.!?]*[.!?])', full_text)
            if title_match:
                parsed_data['title'] = title_match.group(1).strip()
            else:
                parsed_data['title'] = 'Market Title Not Found'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)
            price_patterns = [
                r'(\d+(?:\.\d+)?)\s*%',  # 50%
                r'(\d+(?:\.\d+)?)\s*¬¢',   # 50¬¢
                r'(\d+(?:\.\d+)?)\s*chance'  # 50% chance
            ]
            
            yes_percentage = 0
            for pattern in price_patterns:
                matches = re.findall(pattern, all_text)
                if matches:
                    try:
                        value = float(matches[0])
                        if '¬¢' in pattern or 'chance' in pattern:
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                            yes_percentage = value
                        else:
                            yes_percentage = value
                        break
                    except ValueError:
                        continue
            
            parsed_data['yes_percentage'] = yes_percentage
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
            volume_patterns = [
                r'\$([\d,]+(?:\.\d{2})?)',  # $1,234.56
                r'volume[:\s]*\$?([\d,]+)',  # volume: $1,234
                r'total[:\s]*\$?([\d,]+)'    # total: $1,234
            ]
            
            volume = 'New'
            for pattern in volume_patterns:
                match = re.search(pattern, all_text)
                if match:
                    try:
                        volume_value = match.group(1).replace(',', '')
                        volume = f"${float(volume_value):,.2f}"
                        break
                    except ValueError:
                        continue
            
            parsed_data['volume'] = volume
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
            contract_match = re.search(r'0x[a-fA-F0-9]{40}', all_text)
            if contract_match:
                parsed_data['contract_address'] = contract_match.group()
            else:
                # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å
                partial_match = re.search(r'0x[a-fA-F0-9]{10,}', all_text)
                if partial_match:
                    parsed_data['contract_address'] = partial_match.group()
                else:
                    parsed_data['contract_address'] = ''
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
            parsed_data['market_exists'] = market_exists
            parsed_data['is_boolean'] = is_boolean_market
            
            logger.info(f"RegEx –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(parsed_data)} –ø–æ–ª–µ–π")
            return parsed_data
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    async def analyze_market(self, slug):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ —á–µ—Ä–µ–∑ OCR"""
        try:
            logger.info(f"üîç OCR –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞: {slug}")
            
            if not await self.init_browser():
                return None
            
            # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            extracted_data = await self.capture_and_extract_text(slug)
            
            if not extracted_data:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä—ã–Ω–∫–∞
            market_category = await self.detect_market_category()
            
            # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ Sports –∏–ª–∏ Crypto - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
            if market_category in ['sports', 'crypto']:
                logger.warning(f"‚ö†Ô∏è –†—ã–Ω–æ–∫ {slug} –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {market_category.upper()} - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                return {
                    'market_exists': True,
                    'is_boolean': False,
                    'status': 'closed',
                    'reason': f'category_{market_category}',
                    'category': market_category
                }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
            contract_address = await self.extract_contract_address()
            if contract_address:
                extracted_data['extracted_contract'] = contract_address
                logger.info(f"‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {contract_address}")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é RegEx
            parsed_data = self.parse_data_with_regex(extracted_data)
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if contract_address and not parsed_data.get('contract_address'):
                parsed_data['contract_address'] = contract_address
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –¥–∞–Ω–Ω—ã–µ
            parsed_data['category'] = market_category
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            await self.save_extracted_data(extracted_data, parsed_data, slug)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            result = self.convert_to_standard_format(parsed_data)
            
            logger.info(f"OCR –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {slug}: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR –∞–Ω–∞–ª–∏–∑–∞ {slug}: {e}")
            return None
        finally:
            await self.close_browser()
    
    async def save_extracted_data(self, extracted_data, parsed_data, slug):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            extracted_filename = f"ocr_extracted_text_{slug}_{timestamp}.json"
            with open(extracted_filename, 'w', encoding='utf-8') as f:
                json.dump(extracted_data, f, indent=2, ensure_ascii=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            parsed_filename = f"ocr_parsed_data_{slug}_{timestamp}.json"
            with open(parsed_filename, 'w', encoding='utf-8') as f:
                json.dump(parsed_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {extracted_filename}, {parsed_filename}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def convert_to_standard_format(self, parsed_data):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å 'closed'
            if parsed_data.get('status') == 'closed':
                return {
                    'market_exists': True,
                    'is_boolean': False,
                    'yes_percentage': 0,
                    'contract_address': '',
                    'title': parsed_data.get('title', ''),
                    'description': '',
                    'volume': parsed_data.get('volume', '')
                }

            return {
                'market_exists': parsed_data.get('market_exists', True),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                'is_boolean': parsed_data.get('is_boolean', True),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                'yes_percentage': parsed_data.get('yes_percentage', 0),
                'contract_address': parsed_data.get('contract_address', ''),
                'title': parsed_data.get('title', ''),
                'description': '', # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ "–û–ø–∏—Å–∞–Ω–∏–µ:"
                'volume': parsed_data.get('volume', '')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
            return {
                'market_exists': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                'is_boolean': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True
                'yes_percentage': 0,
                'contract_address': '',
                'title': '',
                'description': '',
                'volume': ''
            }
    
    def get_market_data(self, slug):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)"""
        try:
            result = asyncio.run(self.analyze_market(slug))
            
            if not result:
                logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è {slug}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è
                fallback_data = self.get_fallback_data(slug)
                return {
                    'market_exists': True,
                    'is_boolean': True,
                    'yes_percentage': 50.0,
                    'contract_address': fallback_data.get('contract_address', ''),
                    'title': fallback_data.get('market_name', f"–†—ã–Ω–æ–∫ {slug}"),
                    'volume': fallback_data.get('total_volume', 'New')
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä—ã–Ω–æ–∫ –±—É–ª–µ–≤—ã–º
            if not result.get('is_boolean', True):
                logger.info(f"–†—ã–Ω–æ–∫ {slug} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–ª–µ–≤—ã–º - –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑")
                return {
                    'market_exists': True,
                    'is_boolean': False,
                    'yes_percentage': 0,
                    'contract_address': result.get('contract_address', ''),
                    'title': result.get('title', f"–†—ã–Ω–æ–∫ {slug}"),
                    'volume': result.get('volume', 'New')
                }
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—É–ª–µ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞
            return {
                'market_exists': result.get('market_exists', True),
                'is_boolean': result.get('is_boolean', True),
                'yes_percentage': result.get('yes_percentage', 0),
                'contract_address': result.get('contract_address', ''),
                'title': result.get('title', f"–†—ã–Ω–æ–∫ {slug}"),
                'volume': result.get('volume', 'New')
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
            fallback_data = self.get_fallback_data(slug)
            return {
                'market_exists': True,
                'is_boolean': True,
                'yes_percentage': 50.0,
                'contract_address': fallback_data.get('contract_address', ''),
                'title': fallback_data.get('market_name', f"–†—ã–Ω–æ–∫ {slug}"),
                'volume': fallback_data.get('total_volume', 'New')
            } 